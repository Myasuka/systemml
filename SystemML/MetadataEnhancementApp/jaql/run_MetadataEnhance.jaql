///////////////////////////////////////////////////////////////////////////////
// 
// IBM Confidential
// 
// OCO Source Materials
// 
// (C) Copyright IBM Corp. 2009, 2010, 2011, 2012
// 
// The source code for this program is not published or
// 
// otherwise divested of its trade secrets, irrespective of
// 
// what has been deposited with the U.S. Copyright Office.
// 
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// FILE run_MetadataEnhance.jaql
//
// DESCRIPTION: The jaql file that is called from oozie workflow.xml
///////////////////////////////////////////////////////////////////////////////

//
// Main Driver
//
/*

# Example of invoking this script from the Linux command line:

IN_DIR=input
OUT_DIR=output
jaqlshell -jp custom_modules -e "
Input_input_PARAM          = \"$IN_DIR/data.csv\";
Input_inputMetadata_PARAM  = \"$IN_DIR/data.meta.json\";
Input_outputMetadata_PARAM = \"$OUT_DIR/data.meta.json\";
Input_recodeMap_PARAM      = \"$OUT_DIR/data.map.json\";
Input_inputDelimiter_PARAM = \",\";
" jaql/run_MetadataEnhance.jaql

*/
//
//
// Main Flow:
//  
//    Initialize
//    If attributeKind is null, replace with heuristic
//    Generate recode map for categorical attributes
//

//
// --------------------------------------------------------------------------------
// Initialize
// --------------------------------------------------------------------------------
//

// DFS Path + filename for delimited text input file
input = Input_input_PARAM;

// DFS Path + filename for JSON text metadata input file
inputMetadata = Input_inputMetadata_PARAM;

// DFS Path + filename for the JSON text enhanced metadata output file generated by this script
outputMetadata = Input_outputMetadata_PARAM;

// DFS Path + filename for the JSON text recode map generated by this script 
recodeMap = Input_recodeMap_PARAM;

// input data delimiter, for example "," for comma delimited files (CSV)
inputDelimiter = Input_inputDelimiter_PARAM;

"---------- BEGIN run_MetadataEnhance.jaql ---------";
import MetadataEnhance;

// pin metadata in memory
metadataMem := read(jsonText(inputMetadata));

inputData = MetadataEnhance::inputData(input, metadataMem, inputDelimiter);

// --------------------------------------------------------------------------------
// Enhance the metadata by filling any "null" attributeKind fields using a heuristic
// --------------------------------------------------------------------------------

MetadataEnhance::metaEnhance(inputData, metadataMem, outputMetadata);   		   	  					   	

// --------------------------------------------------------------------------------
// Generate recode map for categorical attributes
// --------------------------------------------------------------------------------

// pin metadata in memory
metadataMem := read(jsonText(outputMetadata));

MetadataEnhance::genRcdMap (inputData, metadataMem, recodeMap);

"---------- END run_MetadataEnhance.jaql -----------";
