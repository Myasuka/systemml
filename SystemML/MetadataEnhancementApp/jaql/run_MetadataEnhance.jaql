///////////////////////////////////////////////////////////////////////////////
// 
// IBM Confidential
// 
// OCO Source Materials
// 
// (C) Copyright IBM Corp. 2009, 2010, 2011, 2012
// 
// The source code for this program is not published or
// 
// otherwise divested of its trade secrets, irrespective of
// 
// what has been deposited with the U.S. Copyright Office.
// 
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// FILE run_MetadataEnhance.jaql
//
// DESCRIPTION: The jaql file that is called from oozie workflow.xml
///////////////////////////////////////////////////////////////////////////////

//
// Main Driver
//
/*

# Example of invoking this script from the Linux command line, using JSON as input:

IN_DIR=input
OUT_DIR=output
jaqlshell -jp custom_modules -e "
Input_inputFormat_PARAM    = \"JSON Text Records\";
Input_inputDelimiter_PARAM = \",\";
Input_input_PARAM          = \"$IN_DIR/data.json\";
Input_inputMetadata_PARAM  = \"$IN_DIR/data.meta.json\";
Input_outputMetadata_PARAM = \"$OUT_DIR/data.meta.json\";
" jaql/run_MetadataEnhance.jaql

# Example of invoking this script from the Linux command line, using JSON as input and no metadata:

IN_DIR=input
OUT_DIR=output
jaqlshell -jp custom_modules -e "
Input_inputFormat_PARAM    = \"JSON Text Records\";
Input_inputDelimiter_PARAM = \",\";
Input_input_PARAM          = \"$IN_DIR/data.json\";
Input_inputMetadata_PARAM  = \" \";
Input_outputMetadata_PARAM = \"$OUT_DIR/data.meta.json\";
" jaql/run_MetadataEnhance.jaql

# Example of invoking this script from the Linux command line, using CSV as input and no metadata:

IN_DIR=input
OUT_DIR=output
jaqlshell -jp custom_modules -e "
Input_inputFormat_PARAM    = \"CSV\";
Input_inputDelimiter_PARAM = \",\";
Input_input_PARAM          = \"$IN_DIR/data.csv\";
Input_inputMetadata_PARAM  = \" \";
Input_outputMetadata_PARAM = \"$OUT_DIR/data.meta.json\";
" jaql/run_MetadataEnhance.jaql

*/
//
//
// Main Flow:
//  
//    Initialize
//    If attributeKind is null, replace with heuristic
//    Generate recode map for categorical attributes
//

//
// --------------------------------------------------------------------------------
// Initialize
// --------------------------------------------------------------------------------
//



// DFS Path + filename for delimited or JSON text input data file
input = Input_input_PARAM;

inputFormat = if (endsWith(input, ".CSV") or endsWith(input, ".csv"))
(
   "CSV"
)
else if (endsWith(input, ".JSON") or endsWith(input, ".json"))
(
   "JSON Text Records"
);

// input data delimiter, for example "," for comma delimited files (CSV)
inputDelimiter = if (Input_inputDelimiter_PARAM != "")
(
   Input_inputDelimiter_PARAM
)
else
(
   ","
);

// DFS Path + filename for JSON text metadata input file
inputMetadata = Input_inputMetadata_PARAM;

// DFS Path + filename for the JSON text enhanced metadata output file generated by this script
outputMetadata = if (inputFormat == "CSV")
(
   strcat(substring(input, 0, strLen(input) -4), '.meta.json')
)
else if (inputFormat == "JSON Text Records")
(
   strcat(substring(input, 0, strLen(input) -5), '.meta.json')
);


"---------- BEGIN run_MetadataEnhance.jaql ---------";
import MetadataEnhance;

setOptions( { conf: { "mapred.reduce.tasks.speculative.execution" : false } });
setOptions( { conf: { "mapred.child.java.opts" : "-Xmx2000M" } });

// pin metadata in memory
metadataMem := if (inputMetadata != "") (if (ls(inputMetadata) == [])
(
   []
)
else
(
   read(jsonText(inputMetadata))
))
else
(
  []
);

jsonLines = fn(location)
    lines ( location,
        inoptions = { converter: "com.ibm.jaql.io.hadoop.converter.FromJsonTextConverter"},
        outoptions = { converter: "com.ibm.jaql.io.hadoop.converter.ToJsonTextConverter"});

columnId = if (inputFormat == "CSV")
(
   MetadataEnhance::getInput(input, metadataMem, inputDelimiter)
)
else if (inputFormat == "JSON Text Records")
(
   inputData = read(jsonLines(input)),
   MetadataEnhance::genJsonColumnId(inputData)
);

// --------------------------------------------------------------------------------
// Enhance the metadata by filling any "null" attributeKind fields using a heuristic
// --------------------------------------------------------------------------------

MetadataEnhance::metaEnhance(columnId, metadataMem, outputMetadata);   		   	  					   	


"---------- END run_MetadataEnhance.jaql -----------";
