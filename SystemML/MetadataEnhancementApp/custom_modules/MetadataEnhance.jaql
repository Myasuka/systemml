
addClassPath("lib/metaDataParse.jar");
eval = javaudf("com.ibm.systemML.dataTransformation.metaDataParse");

jsonLines = fn(location)
    lines ( location,
        inoptions = { converter: "com.ibm.jaql.io.hadoop.converter.FromJsonTextConverter"},
        outoptions = { converter: "com.ibm.jaql.io.hadoop.converter.ToJsonTextConverter"});

// --------------------------------------------------------------------------------
// Read the input data in delimited format
// --------------------------------------------------------------------------------

getInput = fn(input, metadataMem, inputDelimiter) (

  inputArray =
   if (isnull(inputDelimiter))
   (
	read (del(location=input)) 
   )
   else
   (
	read (del(location=input, delimiter=inputDelimiter))
   ),

  numCols = inputArray[0] -> count(),
    
  if (metadataMem == [])
  (
   
     attributeNames = range(1, numCols) -> transform serialize($),
   
     inputArray 
         -> transform arrayToRecord(attributeNames, $)
         -> write(jsonLines(input + ".json")),
   
     attributeNames
         -> enumerate()
         -> transform {"attributeColumnId": $[0]+1, "attributeName": $[1]}
  )
  else
  (
     attributeNames = metadataMem 
         -> transform $.attributeName,

     inputArray 
         -> transform arrayToRecord(attributeNames, $)
         -> write(jsonLines(input + ".json")),
     
     attributeNames
         -> enumerate()
         -> transform {"attributeColumnId": $[0]+1, "attributeName": $[1]} 
  )
);


//
// Generate json file column id
//

genJsonColumnId = fn (inputData)
(
   inputData 
      -> top 1 
      -> expand(names($))
      -> enumerate()
      -> transform {"attributeColumnId":$[0] + 1, "attributeName":$[1]}
);


// --------------------------------------------------------------------------------
// Insert a heuristically derived value for any missing (null) attributeKind fields
// --------------------------------------------------------------------------------

metaEnhance = fn(columnId, metadataMem, outputMetadata) (

join orig in metadataMem, preserve new in columnId 
   where orig.attributeName == new.attributeName
   into {
      new.attributeName,
      "attributeColumnId":(if (isnull(orig.attributeColumnId)) new.attributeColumnId else orig.attributeColumnId),
      "attributeKind":(if (isnull(orig.attributeKind)) "N/A" else orig.attributeKind),
      "attributeType":(if (isnull(orig.attributeType)) "N/A" else orig.attributeType),
      "attributeDistinctCount": (if (isnull(orig.attributeDistinctCount)) "N/A" else orig.attributeDistinctCount)
   }
   -> sort by [$.attributeColumnId]
   -> write(jsonText(outputMetadata))

);

