///////////////////////////////////////////////////////////////////////////////
//
// IBM Confidential
//
// OCO Source Materials
//
// (C) Copyright IBM Corp. 2009, 2010, 2011, 2012
//
// The source code for this program is not published or
//
// otherwise divested of its trade secrets, irrespective of
//
// what has been deposited with the U.S. Copyright Office.
//
///////////////////////////////////////////////////////////////////////////////

// register eval function to parse the meta data

addClassPath("lib/metaDataParse.jar");

eval = javaudf("com.ibm.systemML.dataTransformation.metaDataParse");

// ---------------------------------------------------------------------------
// Func Name:  jsonLines
//             Function to Read in the input data
// input params:
//           input: input data file name
// ---------------------------------------------------------------------------

jsonLines = fn(location)
    lines ( location,
        inoptions = { converter:
                     "com.ibm.jaql.io.hadoop.converter.FromJsonTextConverter"},
        outoptions = { converter:
                     "com.ibm.jaql.io.hadoop.converter.ToJsonTextConverter"});

// ---------------------------------------------------------------
// Perform Filtering, Projecting on the input data
// ---------------------------------------------------------------

filterProject = fn(inputData, metaDataMem, filterExpr, projectColumnsFile, outData, outLabel) (

// e.g: Input_filterExpression_PARAM= '$.GPA > 3.6 and $.Salary > 6000';
filterFunc = if (isnull(filterExpr)) null
                else eval('fn($) ' + filterExpr),

// filter input data
filteredData = if (not isnull(filterFunc)) (
                  inputData-> filter each e filterFunc(e)
                ) else inputData,

// read in projection column file
projListFile = if (not isnull (projectColumnsFile)) (
                  read (jsonText(projectColumnsFile))
                ) else null,

// get projection columns if there exists one
projectColumns = if (not isnull (projListFile)) (
                    singleton(projListFile
                                -> transform $.projectingColumns)
                ) else null,

// if it is null, take the filtering out column list and
// convert it to the actual project list
projectColumns = if (isnull(projectColumns)) (
                   if (not isnull(projListFile)) (
                      filteringOutColumns = singleton( projListFile
                                        -> transform $.filteringOutColumns),
                      if ( not isnull(filteringOutColumns)) (
                        metaDataMem -> filter not $.attributeName in
                                        filteringOutColumns
                                 -> transform $.attributeName
                      ) else null
                   ) else null
                 ) else  projectColumns,

// generate projectionList String
projectColumnStr = if (not isnull(projectColumns)) (
                      projectColumns -> strJoin(",.")
                   ) else null,

// build the projection func
projectionFunc = if( not isnull(projectColumnStr)) (
                      eval ('fn (r) r{.' + projectColumnStr + '}')
                   )
                   else null,

// project input data
filteredProjectedData = if (not isnull(projectionFunc)) (
                         filteredData -> transform each r projectionFunc(r)
                      )else filteredData,

// output the data if done projection or filtering
if ( (not isnull(projectionFunc)) or (not isnull(filterFunc))) (
               filteredProjectedData -> write(jsonLines(outData))
),

// take the label column
labelColumn = if (not isnull(projListFile)) (
                  singleton(projListFile -> transform $.labelColumn)
              ) else null,

              // output the label data
labelStr = if (not isnull(labelColumn)) (
             labelColumn -> strJoin(',.')
           ) else null,

labelColumnFunc = if (not isnull(labelStr)) (
                     eval ('fn (r) r{.' + labelStr + '}')
                  ) else null,

if (not isnull(labelColumnFunc)) (
      filteredData -> transform each r labelColumnFunc (r)
                   -> write (jsonLines(outLabel))
)

);
