///////////////////////////////////////////////////////////////////////////////
//
// IBM Confidential
//
// OCO Source Materials
//
// (C) Copyright IBM Corp. 2009, 2010, 2011, 2012
//
// The source code for this program is not published or
//
// otherwise divested of its trade secrets, irrespective of
//
// what has been deposited with the U.S. Copyright Office.
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// FILE filterProject.jaql
//
// DESCRIPTION: The jaql file that is called from oozie workflow.xml
///////////////////////////////////////////////////////////////////////////////

// -------------------------------------------------------------
// this script is used to perform Filter/Projection of input
// data in Json text format
// Input:
//        input Data File Name (JSON file stored on HDFS)
//        Meta Data File Name (JSON file stored on HDFS),
//        Filter expression ,
//        Projection List File Name(Json file stored on HDFS),
//        Output Meta Data File Name (JSON file stored on HDFS),
//        Output Data File Name (JSON file stored on HDFS)
// Output: Updated Meta Data file (JSON file stored on HDFS)
//         Updated Data File (JSON file stored on HDFS)
// ---------------------------------------------------------------


input = Input_data_PARAM;
meta = Input_metaData_PARAM;
filterExpr = Input_filterExpression_PARAM;
projectColumnsFile = Input_projectColumns_PARAM;
outMeta = Output_metaData_PARAM;
outData = Output_data_PARAM;

// register eval function to parse the meta data

addClassPath("lib/metaDataParse.jar");

eval = javaudf("com.ibm.systemML.dataTransformation.metaDataParse");

// ---------------------------------------------------------------------------
// Func Name:  jsonLines
//             Function to Read in the input data
// input params:
//           input: input data file name
// ---------------------------------------------------------------------------

jsonLines = fn(location)
    lines ( location,
        inoptions = { converter:
                     "com.ibm.jaql.io.hadoop.converter.FromJsonTextConverter"},
        outoptions = { converter:
                     "com.ibm.jaql.io.hadoop.converter.ToJsonTextConverter"});

// ---------------------------------------------------------------
// Perform Filtering, Projecting on the input data
// ---------------------------------------------------------------


// pin in meta data in memory
metaDataMem := read (jsonText(meta));

// read in input data
inputData = read(jsonLines(input));

// e.g: Input_filterExpression_PARAM= '$.GPA > 3.6 and $.Salary > 6000';
filterFunc = if (isnull(filterExpr)) null
                else eval('fn($) ' + filterExpr);

// filter input data
inputData = if (not isnull(filterFunc)) (
                 inputData-> filter each e filterFunc(e)
              ) else inputData;

// read in projection column file
projListFile := if (not isnull (projectColumnsFile)) (
                  read (jsonText(projectColumnsFile))
                ) else null;
// get projection columns if there exists one
projectColumns = if (not isnull (projListFile)) (
                   projListFile -> transform $.projectingColumns 
                                -> expand
                 ) else null;

// if it is null, take the filtering out column list and
// convert it to the actual project list
projectColumns = if (isnull(projectColumns)) (
                   if (not isnull(projListFile)) (
                      filteringOutColumns = projListFile
                                        -> transform $.filteringOutColumns
                                        -> expand,
                      if ( not isnull(filteringOutColumns)) (
                        metaDataMem -> filter not $.attributeName in
                                        filteringOutColumns
                                 -> transform $.attributeName
                      ) else null
                   ) else null
                 ) else projectColumns;

// generate projectionList String
projectColumnStr = if (not isnull(projectColumns)) (
                   //write out the updated meta Data
                   metaDataMem = metaDataMem -> filter $.attributeName in
                                                projectColumns
                               -> transform each e { e{*-.attributeColumnId}}
                               -> enumerate()
                               -> transform {"attributeColumnId":$[0]+1, $[1]}
                               -> write (jsonText (outMeta)),
                   projectColumns -> strJoin(",.")
                   ) else null;

// build the projection func
projectionFunc = if( not isnull(projectColumnStr)) (
                      eval ('fn (r) r{.' + projectColumnStr + '}')
                   )
                   else null;

// project input data
inputData = if (not isnull(projectionFunc)) (
               inputData
               -> transform each r projectionFunc(r)
              ) else inputData;

// output the data if done projection or filtering 
if ( (not isnull(projectionFunc)) or (not isnull(filterFunc))) (
               inputData -> write(jsonLines(outData))
);
