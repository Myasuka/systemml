X = read("C:/Users/IBM_ADMIN/workspace/SVD/bin/a1a_train.X", rows=1605, cols=124, format="text")
Y = read("C:/Users/IBM_ADMIN/workspace/SVD/bin/a1a_train.Y", rows=1605, cols=1, format="text")

epsilon = 0.000001
lambda = 1

num_samples = nrow(X)
dimensions = ncol(X)

g_old = t(X) %*% Y
s = g_old
w = Rand(rows=dimensions, cols=1, min=0, max=0, pdf="uniform")

iter = 0
continue = 1
while(continue == 1)  {
	# minimizing primal obj along direction s
	step_sz = 0
	Xd = X %*% s
	wd = lambda * sum(w * s)
	dd = lambda * sum(s * s)
	continue1 = 1
	while(continue1 == 1){
		tmp_w = w + step_sz*s
		out = 1 - Y * (X %*% tmp_w)
		sv = ppred(out, 0, ">")
		out = out * sv
		g = wd + step_sz*dd - sum(out * Y * Xd)
		h = dd + sum(Xd * sv * Xd)
		step_sz = step_sz - g/h
		if (g*g/h < 0.0000000001){
			continue1 = 0
		}
	}
	
	#update weights
	w = w + step_sz*s
	
	out = 1 - Y * (X %*% w)
	sv = ppred(out, 0, ">")
	out = sv * out
	obj = 0.5 * sum(out * out) + lambda/2 * sum(w * w)
	g_new = t(X) %*% (out * Y) - lambda * w
	
	print("OBJ = "+obj)
	
	tmp = sum(s * g_old)
	if(step_sz*tmp < epsilon*obj){
		continue = 0
	}
	
	#non-linear CG step
	be = sum(g_new * g_new)/sum(g_old * g_old)
	s = be * s + g_new
	g_old = g_new

	iter = iter + 1
}

write(w, "w_dml.out", format="text")
print("Iterations : " + iter)
print("completed learning")

#w = read("w.out", rows=124, cols=1, format="text")
X = read("C:/Users/IBM_ADMIN/workspace/SVD/bin/a1a_test.X", rows=30956, cols=124, format="text")
N = nrow(X)
Y = read("C:/Users/IBM_ADMIN/workspace/SVD/bin/a1a_test.Y", rows=30956, cols=1, format="text")

pred = 2*ppred(X %*% w, 0, ">=") - 1
#write(pred, "pred.out", format="text")

diff = (Y-pred)/2
#write(diff, "diff.out", format="text")

mismatches = sum(diff * diff)
err = mismatches / N * 100

print("#Incorrect : "+mismatches)
print("Error(%) : "+err)
