# SpaRSA
# NOTE: For this version, M = 5 is hard-coded, and we save the 5 previous 

tau = 1;
x = Rand(rows = 1, cols = 1, min = 1, max = 1, pdf = "uniform");
#X = readMM( "llr_xfile", rows=10, cols=10, format="text");
#Y = readMM( "llr_xfile", rows=10, cols=10, format="text");
X = Rand(rows = 100, cols = 1, min = 1, max = 10, pdf = "uniform");
Y = Rand(rows = 100, cols = 1, min = 1, max = 10, pdf = "uniform");

tol = 0.000001 					# 1e-6;
alpha_min = 1 * 10^-30; 		# 1e-30;
alpha_max = 1 * 10^30			# 1e30;
eta = 2.0;
alpha = 1.0;
### NOTE: FOR THIS VERSION, M = 5 is hard-coded
M = 5;
sigma = 0.01;

outer_converge = false;
inner_converge = false;

### BEGIN [obj, g] = ObjGradf(x,tau,X,Y);
r = X %*% x - Y;
g = t(X) %*% r;

obj = 0.5 * castAsScalar(t(r) %*% r) + tau * sum (abs (x) );
### END FUNCTION BODY

### REPLACE objHistory VECTOR WITH FIXED NUMBER VALUES
minVal = - 1 * 10^300;
#objHistory = Rand(rows = M, cols = 1, min = minVal, max = minVal, pdf = "uniform");
objHistory_1 = minVal
objHistory_2 = minVal
objHistory_3 = minVal
objHistory_4 = minVal
objHistory_5 = minVal

objHistory_1 = obj;


outeriter = 0;
maxouteriter = 1;
maxinneriter = 1;
while(!outer_converge & outeriter < maxouteriter) {
	
	outeriter = outeriter + 1;
	inneriter = 0;
	inner_converge = false;

	#inneriter = 0
	while (!inner_converge & inneriter < maxinneriter) {
		
		inneriter = inneriter + 1;
		print ( " ___inneriter: ", inneriter);
		
		### BEGIN : xnew = SolveProximalSubproblem(x - g / alpha, tau / alpha);
		u = x - g / alpha;
		lambda = tau /alpha;
		
		#xnew = sign(u) * max(abs(u) - lambda, 0);
		v1 = ppred (u, 0, ">");
    	v2 = ppred( u,  0, "<");
    	
    	signumVector_u = v1 + (v2 * -1)
		
		### MATLAB syntax -- we need a max(M,S) where M is a mtx,
		###  S is a scalar, and max(M,S) replaces m in M with max(m,s).
		#Compare each element of X to a scalar:
		#max(X,5)
		#	ans =	5     8     5
     	#			7     5     9
     				
		# xnew = signumVector_u * max(abs(u) - lambda, 0);
		# rewrite so that v4 = max(abs(u) - lambda, 0);
		v3 = ppred(abs(u), lambda, ">");
		v4 = v3 * abs(u);
		xnew = signumVector_u * v4;
		
		### END FUNCTION BODY

		dx = xnew -x;   		# VECTOR
		dx2 = t(dx) %*% dx;		# SCALAR
		
		###  BEGIN: [objnew, gnew] = ObjGradf(xnew,tau,X,Y);
		r = X %*% xnew - Y;
		gnew = t(X) %*% r;
		objnew = 0.5 * t(r) %*% r + tau * sum (abs (xnew) );
		### END FUNCTION BODY
		
		max_objHistory = max(objHistory_1, objHistory_2);
		max_objHistory = max(max_objHistory, objHistory_3);
		max_objHistory = max(max_objHistory, objHistory_4);
		max_objHistory = max(max_objHistory, objHistory_5);	
		
		### REPLACED objthreshold = max(objHistory) - 0.5 * sigma * alpha * castAsScalar(dx2);
		objthreshold = max_objHistory - 0.5 * sigma * alpha * castAsScalar(dx2);

		objNewScalar = castAsScalar(objnew);
		
		print(" ___objNewScalar ", objNewScalar);
		print(" ___objthreshold ", objthreshold);
		
		if (objNewScalar <  objthreshold) {
			x = xnew;
			dg = gnew - g;
			g = gnew;
			inner_converge = true;
			i = 2;

			#while (i <= M){
			#	###objHistory[i] = objHistory[i - 1];
			#	i = i + 1;
			#}
			
			objHistory_5 = objHistory_4 
			objHistory_4 = objHistory_3 
			objHistory_3 = objHistory_2 
			objHistory_2 = objHistory_1 
			objHistory_1 = objnew;
			relChangeObj = (objHistory_2 - objHistory_1) / objHistory_2;
		}
		
		else {
			alpha = eta * alpha;
		}
	}		 
	alpha = min(max(castAsScalar(t(dg) %*% dx / dx2), alpha_min), alpha_max);
	
	### ??? - causes problem
	relChangeObjAbs = abs(relChangeObj);
	if (relChangeObjAbs < tol){
		outer_converge = true;
	}
	
	### ??? - CREATES A MAP-REDUCE JOB FOR PREDICATE 
	#if (abs(relChangeObj) < tol){
	#	outer_converge = true;
	#}
		
}  

writeMM(x, "X.SpaRSA.result", format="text");
sumx = sum(x);
print(" ___sum x ", x); 
	
