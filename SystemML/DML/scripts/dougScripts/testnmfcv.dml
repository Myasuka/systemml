nmfcvtrain = function(Matrix[Double] m1,Matrix[Double] m2, Matrix[Double] m3) return (Matrix[Double] wd, Matrix[Double] hd) {
wd = t(m1)
hd = t(m2)
}

nmfcvtest = function (Matrix[Double] m4, Matrix[Double] wd, Matrix[Double] hd) return (Double error)
{
error = 10.2
}



mydata = read ("./scripts/cv/llr_xfile", rows=10, cols = 10, format="text") ;


################################### SUBMATRIX
crossval (mydata)
partition (type='kfold', element='submatrix', numrowgroups=2, numcolgroups=2) as (a,b,c,d) 
train nmfcvtrain(b,c,d) as (w,h)
test nmfcvtest(a,w,h) as (error)
aggregate sum(error) as (err)


#################################### ROW TEST
#crossval (mydata)
#partition (method='kfold', element='row', numfolds=2, rows_in_block=4, columns_in_block=4) as (a,b) 
#train nmfcvtrain1_ROW(a,b) as (w,h)
#test nmfcvtest1_ROW(a,w,h,b) as (error)
#aggregate sum(error) as (err)


#crossval (mydata)
#partition (method='kfold', element='row', numfolds=2, replicate=true) as (a, b)
#train nmfcvtrain1_ROW(a,a) as (w,h)
#test nmfcvtest1_ROW(a,w,h,a) as (error)
#aggregate sum(error) as (err)

#partition (method='bootstrap', element='row', frac='0.4', numiterations=1) as (a)
#train nmfcvtrain1_ROW(a,a) as (w,h)
#test nmfcvtest1_ROW(a,w,h,a) as (error)

#partition (method='holdout', element='row', frac='0.4', numiterations=1) as (a,b) 
#train nmfcvtrain1_ROW(a,b) as (w,h)
#test nmfcvtest1_ROW(a,w,h,b) as (error)
