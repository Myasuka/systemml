nmfcvtrain1_ROW = function(Matrix[Double] c,Matrix[Double] d) return (Matrix[Double] wd, Matrix[Double] hd) {
	zrow = nrow(c);
	numtopics = 4;
	wd = Rand(rows = zrow, cols = numtopics) ;
	
	zcol = ncol(d)
	numtopics = 4;
	hd = Rand(rows = 4, cols=10) ;

	write( c, "scripts/cRow_output", format="text");
	write( d, "scripts/dRow_output", format="text");


}

nmfcvtest1_ROW = function (Matrix[Double] x, Matrix[Double] wd, Matrix[Double] hd, Matrix[Double] alpha) return (Double error)
{

	write(x, "scripts/X_Output", format="text");	

	max_iteration = 1
	xrow = nrow(x)
	numtopics = 4;
	wb = Rand(rows = xrow, cols = numtopics) ;
	#continue = true 
	#berror = x - wb %*% hd
	#newObj = sum(berror * berror)
	
	i = 0
	#while (continue && i < max_iteration) {
	while (i < max_iteration) {
		wb = wb * ((x %*% t(hd)) / ( wb %*% (hd %*% t(hd))))
  		i = i + 1
  		
  		# Convergence test begin
		#oldObj = newObj
  		#berror = x - wb %*% hd
		#newObj = sum(berror * berror)
  		#continue = (newObj-oldObj) > (oldObj * accuracy)
	}
	
	ycol = ncol(x)
	numtopics = 4;
	hc = Rand(rows = numtopics, cols = ycol)
	#continue = true
	#cerror = x - wd %*% hc
	#newObj = sum(cerror * cerror)
	
	i = 0
	#while (continue && i < max_iteration) {
	while (i < max_iteration) {
		#replaced y --> x
		hc = hc * ((t(wd) %*% x) /  ( (t(wd) %*% wd) %*% hc))
		i = i + 1
		
		# Convergence test begin
		#oldObj = newObj
  		#cerror = y - wd %*% hc
		#newObj = sum(cerror * cerror)
		#continue = (newObj-oldObj) > (oldObj * accuracy)
	}

	apred = wb %*% hc
	diff = alpha - apred 
	#diff = alpha
	
	product = diff*diff
	error = rowSums(colSums(product));

}



mydata = read ("./scripts/cv/llr_xfile", rows=10, cols = 10, format="text") ;


################################### SUBMATRIX
#crossval (mydata)
#partition (method='kfold', element='submatrix', numRowGroups=2, numColGroups=2, rows_in_block=1000, columns_in_block=1000) as (a,b,c,d) 
#train nmfcvtrain1(d) as (w,h)
#test nmfcvtest1(b,c,w,h,a) as (error)
#aggregate sum(error) as (err)


#################################### ROW TEST
#crossval (mydata)
#partition (method='kfold', element='row', numfolds=2, rows_in_block=4, columns_in_block=4) as (a,b) 
#train nmfcvtrain1_ROW(a,b) as (w,h)
#test nmfcvtest1_ROW(a,w,h,b) as (error)
#aggregate sum(error) as (err)


crossval (mydata)
partition (method='kfold', element='row', numfolds=4, replicate=true) as (a, b)
train nmfcvtrain1_ROW(a,a) as (w,h)
test nmfcvtest1_ROW(a,w,h,a) as (error)
aggregate sum(error) as (err)

#partition (method='bootstrap', element='row', frac='0.4', numiterations=1) as (a)
#train nmfcvtrain1_ROW(a,a) as (w,h)
#test nmfcvtest1_ROW(a,w,h,a) as (error)

#partition (method='holdout', element='row', frac='0.4', numiterations=1) as (a,b) 
#train nmfcvtrain1_ROW(a,b) as (w,h)
#test nmfcvtest1_ROW(a,w,h,b) as (error)
