/*
 *                         1           2                    3                     4        5
 *                        (odds-ratio, lower-conf-interval, higher-conf-interval, p-value, count
 */

D = read($1);  # input data set
S1 = read($2); # feature set 1
S2 = read($3); # label set 2
group1 = read($4); # 0/1 vector, 1's for domain values defining a subset for features
group2 = read($5); # 0/1 vector, 1's for domain values defining a subset for labels

numPairs = $6; # number of attribute pairs (|S1|*|S2|)

s1size = ncol(S1);
s2size = ncol(S2);

numstats = 5;
basestats = matrix(0, rows=numstats, cols=numPairs);

parfor( i in 1:s1size, mode=REMOTE_MR, check=0, opt=CONSTRAINED)
#for(i in 1:s1size)
{
  a1 = castAsScalar(S1[1,i]);
  A1 = D[,a1];

  for( j in 1:s2size)
  {
    pairID = (i-1)*s2size+j; 
    a2 = castAsScalar(S2[1,j]);
    A2 = D[,a2];

    print("Computing odds-ratio for: [" + i + "," + j + "]");
    [or, lconf, uconf, pval, cnt] = odds_ratio(A1,A2,group1,group2);   
    
    basestats[1,pairID] = or;
    basestats[2,pairID] = lconf;
    basestats[3,pairID] = uconf;
    basestats[4,pairID] = pval;
    basestats[5,pairID] = cnt;
  }
}

write(basestats, $7 + "/bivar.stats");

odds_ratio = function(Matrix[Double] A, Matrix[Double] B, Matrix[Double] g1, Matrix[Double] g2) 
	     return (Double or, Double lconf, Double uconf, Double pval, Integer cnt)
{
  F = ctable(A,B);

  #fr = nrow(F)
  #fc = ncol(F)
  #print(fr + " " + fc)

  if (nrow(F) <= 1 | ncol(F) <= 1) {
    or = -1.0;
    lconf = -1.0;
    uconf = -1.0;
    pval = -1.0;
    cnt = 0.0;
  }
  else {
    g1_local = g1[1:nrow(F),1];
    g2_local = g2[1:ncol(F),1];

    n = sum(F);
	
    tmp1 = t(g1_local) %*% F;

    n1_ = sum(tmp1);
    n_1 = sum(F %*% g2_local);

    n11 = tmp1 %*% g2_local;
    n01 = n1_ - n11;
    n10 = n_1 - n11;
    n00 = n - n11 - n10 - n01;

    print(castAsScalar(n11) + " " + castAsScalar(n01) + " " + castAsScalar(n10) + " " + castAsScalar(n00))

    odds_ratio = n11 * n00 / (n01 * n10);
    sigma_log_odds_ratio = sqrt (1.0 / n00 + 1.0 / n01 + 1.0 / n10 + 1.0 / n11);
    odds_ratio_interval_small = odds_ratio / exp (1.96 * sigma_log_odds_ratio);
    odds_ratio_interval_large = odds_ratio * exp (1.96 * sigma_log_odds_ratio);

    #chi-squared computation
    chi_diff = n00 * n11 - n01 * n10;
    chi_denom = (n00 + n01) * (n10 + n11) * (n00 + n10) * (n01 + n11);
    chi_squared = (n00 + n01 + n10 + n11) * chi_diff * chi_diff / chi_denom;
    pValue = 1 - cumulativeProbability(target=castAsScalar(chi_squared), dist="chisq", df=1);

    or = castAsScalar(odds_ratio);
    lconf = castAsScalar(odds_ratio_interval_small);
    uconf = castAsScalar(odds_ratio_interval_large);
    pval = pValue;
    cnt = n;
  }
}
