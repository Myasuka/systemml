// Jaql query takes a DEL file of samples with features encoded in 
// sparse format as input and writes corresponding matrix file as output.

samples = 
read(del("bmw/features64.del",
	 {delimiter: ","}));

splitIntoArray = fn(row_id, str, col_offset)(
  strSplit(str, ":")
  -> transform (key_val = strSplit($, ";"),
  	        [row_id,
		 col_offset+convert(key_val[0], schema long), 
		 convert(key_val[1], schema double)])
);

samples
-> enumerate()
-> transform each sample (sample[1] 
	           	  -> enumerate() 
			  -> transform {"row": sample[0]+1,
			  	        "col": $[0]+1,
					"value": $[1]})
-> expand
-> filter not isnull($."value")
-> transform (if($."col"==55) splitIntoArray($."row", $."value", 54)
         else if($."col"==56) splitIntoArray($."row", $."value", 112)
         else if($."col"==57) splitIntoArray($."row", $."value", 203)
         else if($."col"==58) splitIntoArray($."row", $."value", 241)
         else if($."col"==59) splitIntoArray($."row", $."value", 319)
         else if($."col"==60) splitIntoArray($."row", $."value", 319)
         else if($."col"==61) splitIntoArray($."row", $."value", 429)
         else if($."col"==62) splitIntoArray($."row", $."value", 1649)
         else if($."col"==63) splitIntoArray($."row", $."value", 4877)
         else if($."col"==64) splitIntoArray($."row", $."value", 8615)
         else [[$."row", $."col", convert($."value", schema double)]])
-> expand
-> write(del("bmw/features21885.mtx",
        {delimiter: " ", quoted: false}));
