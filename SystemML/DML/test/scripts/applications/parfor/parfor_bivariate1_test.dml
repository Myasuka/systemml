
/*
 *
 * For a given pair of attribute sets, compute bivariate statistics between all attribute pairs 
 *   Given, S_1 = {A_11, A_12, ... A_1m} and S_2 = {A_21, A_22, ... A_2n} 
 *          compute bivariate stats for m*n pairs (A_1i, A_2j), (1<= i <=m) and (1<= j <=n)
 *
 * Seven inputs:  
 *    $1) D  - input data
 *    $2) S1 - First attribute set {A_11, A_12, ... A_1m}
 *    $3) S2 - Second attribute set {A_21, A_22, ... A_2n}
 *    $4) K1 - kind for attributes in S1 
 *    $5) K2 - kind for attributes in S2
 *             kind=1 for scale, kind=2 for nominal, kind=3 for ordinal
 *    $6) numPairs - total number of pairs (m*n)
 *    $7) maxC - maximum number of categories in any categorical attribute
 * 
 * One output:    
 *    $6) output directory in which following four statistics files are created
 *        + bivar.stats - matrix with all 8 bivariate statistics computed for different attribute pairs
 *                        (R, (chi-sq, df, pval, cramersv), spearman, Eta, F)
 *        + categorical.counts - 
 *        + categorical.means - 
 *        + categorical.variances - 
 *          -> Values in these three matrices are applicable only for scale-categorical attribute pairs. 
 *          k^th column in these matrices denote the attribute pair (A_1i,A_2j) where i*j = k.
 *
 */

#TODO MB exploit symmetry

D = read($1, rows=$7, cols=$8);  # input data set
S1 = read($2, rows=1, cols=$9); # attribute set 1
S2 = read($3, rows=1, cols=$9); # attribute set 2
K1 = read($4, rows=1, cols=$9); # kind for attributes in S1
K2 = read($5, rows=1, cols=$9); # kind for attributes in S2
numPairs = $10; # number of attribute pairs (|S1|*|S2|)
maxC = $11;     # max number of categories in any categorical attribute

s1size = ncol(S1);
s2size = ncol(S2);

#numpairs = s1size * s2size;
#print(s1size + ", " + s2size + ", " + numpairs);

# R, chisq, cramers, spearman, eta, anovaf
numstats = 8;
basestats = Rand(rows=numstats, cols=numPairs, min=0, max=0);
cat_counts = Rand(rows=maxC, cols=numPairs, min=0, max=0);
cat_means = Rand(rows=maxC, cols=numPairs, min=0, max=0);
cat_vars = Rand(rows=maxC, cols=numPairs, min=0, max=0);

dummy = Rand(rows=1, cols=1, min=1, max=1);


for( i in 1:s1size, par=4, mode=LOCAL, check=0) {
    a1 = castAsScalar(S1[:,i]);
    k1 = castAsScalar(K1[1,i]);
    A1 = D[:,a1];
    print("a1="+a1);

    for( j in 1:s2size, par=4, mode=LOCAL, check=0) {
        pairID = (i-1)*s2size+j; 
        print("ID="+pairID+"(i="+i+",j="+j+")");
        a2 = castAsScalar(S2[:,j]);
        k2 = castAsScalar(K2[1,j]);
        A2 = D[:,a2];
        print("a2="+a2);
    
        if (k1 == k2) {
            if (k1 == 1) {
                # scale-scale
                print("[" + i + "," + j + "] scale-scale");
                covXY = cov(A1,A2);
                W = nrow(A1);
                m2X = centralMoment(A1,2);
                m2Y = centralMoment(A2,2);
                sigmaX = sqrt(m2X * (W/(W-1.0)) );
                sigmaY = sqrt(m2Y * (W/(W-1.0)) );
                R = covXY / (sigmaX*sigmaY);
                print("Rmx="+m2X);
                print("Rmy="+m2Y);
                print("Rcov="+covXY);
                print("Rsx="+sigmaX);
                print("Rsy="+sigmaY);
                print("R="+R);  
                basestats[1,pairID] = dummy*R;
                print("scale:"+R);
            } else {
                # nominal-nominal or ordinal-ordinal
                print("[" + i + "," + j + "] categorical-categorical");
                F = ctable(A1,A2);
                W = sum(F);
                r = rowSums(F);
                c = colSums(F);
                E = (r %*% c)/W;
                T = (F-E)^2/E;
                chi_squared = sum(T);
                degFreedom = (nrow(F)-1)*(ncol(F)-1);
                pValue = 1 - cumulativeProbability(target=chi_squared, dist="chisq", df=degFreedom);
                R = nrow(F);
                C = ncol(F);
                q = min(R,C);
                cramersv = sqrt(chi_squared/(W*(q-1)));
                basestats[2,pairID] = dummy*chi_squared;
                basestats[3,pairID] = dummy*degFreedom;
                basestats[4,pairID] = dummy*pValue;
                basestats[5,pairID] = dummy*cramersv;

                if ( k1 == 3 ) {
                    # ordinal-ordinal
                    print("[" + i + "," + j + "] ordinal-ordinal");
                    sp = spearman(A1,A2);
                    basestats[6,pairID] = dummy*sp;
                } 
            } 
        } 
        else {
            if (k1 == 1 | k2 == 1) {
                # Scale-nominal/ordinal
                print("[" + i + "," + j + "] scale-categorical");
                if ( k1 == 1 ) {
                    W = nrow(A2);
                    my = mean(A1);
                    varY = centralMoment(A1,2) * W/(W-1.0)
                    CFreqs = groupedAggregate(target=A1, groups=A2, fn="count"); 
                    CMeans = groupedAggregate(target=A1, groups=A2, fn="mean");
                    CVars = groupedAggregate(target=A1, groups=A2, fn="variance");
                    R = nrow(CFreqs);
                    Eta = sqrt(1 - ( sum((CFreqs-1)*CVars) / ((W-1)*varY) ));
                    anova_num = sum( (CFreqs*(CMeans-my)^2) )/(R-1);
                    anova_den = sum( (CFreqs-1)*CVars )/(W-R);
                    AnovaF = anova_num/anova_den;
                }
                else {
                    W = nrow(A1);
                    my = mean(A2);
                    varY = centralMoment(A2,2) * W/(W-1.0)
                    CFreqs = groupedAggregate(target=A2, groups=A1, fn="count"); 
                    CMeans = groupedAggregate(target=A2, groups=A1, fn="mean");
                    CVars = groupedAggregate(target=A2, groups=A1, fn="variance");
                    R = nrow(CFreqs);
                    Eta = sqrt(1 - ( sum((CFreqs-1)*CVars) / ((W-1)*varY) ));
                    anova_num = sum( (CFreqs*(CMeans-my)^2) )/(R-1);
                    anova_den = sum( (CFreqs-1)*CVars )/(W-R);
                    AnovaF = anova_num/anova_den;
                }
                basestats[7,pairID] = dummy*Eta;
                basestats[8,pairID] = dummy*AnovaF;
                cat_counts[:,pairID] = CFreqs;
                cat_means[:,pairID] = CMeans;
                cat_vars[:,pairID] = CVars;    
            }
            else                         
            {
                # nominal-ordinal or ordinal-nominal
                print("[" + i + "," + j + "] categorical-categorical");
                F = ctable(A1,A2);
                W = sum(F);
                r = rowSums(F);
                c = colSums(F);
                E = (r %*% c)/W;
                T = (F-E)^2/E;
                chi_squared = sum(T);
                degFreedom = (nrow(F)-1)*(ncol(F)-1);
                pValue = 1 - cumulativeProbability(target=chi_squared, dist="chisq", df=degFreedom);
                R = nrow(F);
                C = ncol(F);
                q = min(R,C);
                cramersv = sqrt(chi_squared/(W*(q-1)));

                basestats[2,pairID] = dummy*chi_squared;
                basestats[3,pairID] = dummy*degFreedom;
                basestats[4,pairID] = dummy*pValue;
                basestats[5,pairID] = dummy*cramersv;
            }
        } 
    }
}

write(basestats, $6 + "/bivar.stats");
write(cat_counts, $6 + "/category.counts");
write(cat_means, $6 + "/category.means");
write(cat_vars, $6 + "/category.variances");

