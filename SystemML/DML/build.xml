<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Ant script to build and test systemml-->
<project basedir="." default="build" name="DML">
	<property environment="env" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.6" />
	<property name="source" value="1.6" />
	
	<property file="build.prop" />
	
	<property name="junit.antlibpathname" value="${general.antpath}/junit.jar" />
	<property name="junit.output.dir" value="junit" />
	<property name="junit.report.dir" value="junit_reports" />

	<tstamp>
		<format property="release.timestamp" pattern="yyyyMMdd" locale="en,UK" />
	</tstamp>

	<!-- Tian: What is this paragraph for? -->
	<path id="general.classpath">
		<fileset dir="${general.antpath}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- load the svn task -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="general.classpath" />
	<!-- load the var task -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="general.classpath" />

	<!-- add jar file to JUNIT's classpath -->
	<path id="JUnit4.classpath">
		<pathelement location="${junit.antlibpathname}" />
	</path>
		
	<path id="OWN.classpath">
		<pathelement location="${build.ownlib}/nimble.jar" />    			  <!-- This needs to be replaced by source codes -->   
		<pathelement location="${build.ownlib}/grappa_vis.jar" />             <!-- for visualizing HOP/LOP DAGs. SHOULD NOT BE SHIPPED. -->          
<!--	<pathelement location="${build.ownlib}/lapack_simple.jar" /> -->  <!-- for eigen value decomposition -->
<!--	<pathelement location="lib/arpack-combo-0.1.jar" /> -->  <!-- for intW in hEigenWrappper -->
<!-- 	<pathelement location="lib/netlib-java-0.9.2.jar" /> --> <!-- for using lapack etc., mainly used by nimble-related stuff -->
	</path>
	
	<path id="SHARED.classpath">
		<pathelement location="${build.sharedlib}/log4j-1.2.7/dist/lib/log4j-1.2.15.jar" /> <!-- for org.apache.log4j.* imported by com.ibm.bi.dml.api.DMLScript.java -->
		<pathelement location="${build.sharedlib}/Jaql-0.5/jaql.jar" />  <!-- for com.ibm.bi.dml.api.JaqlUdf -->
		<pathelement location="${build.sharedlib}/JSON4J.jar" />  <!-- for JSONObject used in com.ibm.bi.dml.parser.IOStatement.java -->
	    <pathelement location="${build.sharedlib}/opencsv-1.8/opencsv-1.8.jar" /> <!-- for read/write csv -->
	</path>	
	
	<!-- only used for build from RTC or from your PC ant cmd line -->
	<path id="HADOOP.local.classpath">
		<pathelement location="${hadoop.local.path}/hadoop-core-1.1.1.jar" />
		<pathelement location="${hadoop.local.path}/lib/commons-math-2.2.jar" />  <!-- for random number generation -->
		<pathelement location="${hadoop.local.path}/lib/commons-configuration-1.6.jar" /> 
		<pathelement location="${hadoop.local.path}/lib/commons-lang-2.4.jar" />
		<pathelement location="${hadoop.local.path}/lib/jackson-core-asl-1.8.8.jar" />
		<pathelement location="${hadoop.local.path}/lib/jackson-mapper-asl-1.8.8.jar" />
		<pathelement location="${hadoop.local.path}/lib/commons-logging-1.1.1.jar" />  <!-- for LogFactory used by com.ibm.bi.dml.sgd.Summit.java -->
		<pathelement location="${hadoop.local.path}/lib/commons-httpclient-3.0.1.jar" /> <!-- for running "auto" in local mode -->
		<pathelement location="${hadoop.local.path}/lib/commons-cli-1.2.jar" /> <!-- for GenericOptionParser -->
	</path>
	
	<path id="DML.classpath">
		<path refid="OWN.classpath" />
		<path refid="SHARED.classpath" />
		<path refid="HADOOP.local.classpath" />
		<path refid="JUnit4.classpath" />
	</path>
		
	<target name="deleteall">
		<delete includeemptydirs="true">
			<fileset dir="lib" defaultexcludes="false">
				<include name="**/.svn/**" />
			</fileset>
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="." defaultexcludes="false">
				<include name="**/*/**" />
				<exclude name="build.prop" />
				<exclude name="build.xml" />
				<exclude name="lib/ant/**" />
			</fileset>
		</delete>
	</target>
	
	<target name="clean">
		<delete dir="${build.folder}" failonerror="false" />
		<delete dir="junit" failonerror="false" />
		<delete dir="junit_reports" failonerror="false" />
	</target>
	
	<!-- Make sure start from fresh and copy all to bin directory -->
	<target name="init" depends="clean">
		<mkdir dir="${build.folder}" />
		<copy includeemptydirs="false" todir="${build.folder}">
			<fileset dir="src">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${build.folder}">
			<fileset dir="examples">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${build.folder}">
			<fileset dir="test">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
				<exclude name="scripts/" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${build.folder}">
			<fileset dir="test_integration">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	
	<!-- Make sure javacc is called to generate DML parser after init -->
	<target depends="init" name="parser"> 
		<echo message="Running JavaCC on DMLQLParser.jj"/>
		<javacc target="src/com/ibm/bi/dml/parser/DMLQLParser.jj"
		        javacchome="${javacc.home}"/>
	</target>
	
    <!-- Make sure build depends on building DML parser first -->
	<target depends="parser" name="build">
		<echo message="${ant.project.name}: ${ant.file}" />
		<!-- Double check the java compiler version -->
		<echo message="Using java version ${ant.java.version}."/> 
		<javac debug="true" debuglevel="${debuglevel}" destdir="${build.folder}" source="${source}" target="${target}" excludes="**/packagesupport/EigenWrapper.java,**/packagesupport/LinearSolverWrapperCP.java" >
			<src path="src" />
			<classpath refid="DML.classpath" />
		</javac>
		<javac debug="true" debuglevel="${debuglevel}" destdir="${build.folder}" source="${source}" target="${target}">
			<src path="test" />
			<exclude name="scripts/" />
			<classpath refid="DML.classpath" />
		</javac>
		<javac debug="true" debuglevel="${debuglevel}" destdir="${build.folder}" source="${source}" target="${target}" excludes="**/test/integration/alpha/**,**/test/integration/functions/external/EigenTest.java">
			<src path="test_integration" />
			<classpath refid="DML.classpath" />
		</javac>
		<!-- Exclude dml/examples from build -->
	</target>
	
	<!-- Make sure the formal SystemML.jar depends on build -->
	<target depends="build" name="jar">
		<jar jarfile="${build.folder}/${build.jarnamerun}" basedir="${build.folder}">
			<exclude name="dml/test/**" />
			<exclude name="dml/runtime/test/**" />
			<zipfileset includes="**/*.class" src="${build.ownlib}/nimble.jar"/>
			<zipfileset includes="**/*.class" src="${build.sharedlib}/JSON4J.jar"/>
			<zipfileset includes="**/*.class" src="${hadoop.local.path}/lib/commons-math-2.2.jar"/> 
			<!-- TZ: IHC 1.0.3 has commons-math-2.2.jar already, but Cloudera does not have it yet, so we need to include it for now. -->
			<!-- TZ: To include any other jar, we need code scan and legal approval -->
			<manifest>
				<attribute name="Class-Path" value="./" />
				<attribute name="Main-Class" value="com.ibm.bi.dml.api.DMLScript" />
				<section name="versioninfo">
					<attribute name="SystemML" value="${systemml.version}" />
					<attribute name="BuildTime" value="${release.timestamp}" />
					<attribute name="ReleaseNotes" value="${release.notes}" />
				</section>
			</manifest>
		</jar>
	</target>
	
	<!-- TZ: This target is a hack for building SystemML-1.4.jar based on BigInsights 1.4 release and it should be removed.
	     Berthold requested a special SystemML-1.4.jar for customer PoC that includes common-math-2.2.jar. -->
	<target depends="build" name="specialjar">
		<jar jarfile="${build.folder}/SystemML-1.4.jar" basedir="${build.folder}">
			<exclude name="dml/test/**" />
			<exclude name="dml/runtime/test/**" />
			<zipfileset includes="**/*.class" src="${build.ownlib}/nimble.jar"/>
			<zipfileset includes="**/*.class" src="${build.sharedlib}/JSON4J.jar"/>
			<zipfileset includes="**/*.class" src="${hadoop.local.path}/lib/commons-math-2.2.jar"/>
			<!-- TZ: To include any other jar, we need code scan and legal approval -->
			<manifest>
				<attribute name="Class-Path" value="./" />
				<attribute name="Main-Class" value="com.ibm.bi.dml.api.DMLScript" />
				<section name="versioninfo">
					<attribute name="SystemML" value="${systemml.version}" />
					<attribute name="BuildTime" value="${release.timestamp}" />
					<attribute name="ReleaseNotes" value="${release.notes}" />
				</section>
			</manifest>
		</jar>
	</target>
	
	<!-- TZ: This target has been used to build SystemML BETA based on BI 1.3 release, it is no longer needed, but just used to track what we have done.
	     Make sure release Detica depends on jar, copy over SystemML.jar and DML scripts -->
	<target name="Detica" depends="jar">
		<copy file="${build.folder}/${build.jarnamerun}" todir="${release.detica}" overwrite="true"/>
		<copy file="${build.configfile}" todir="${release.detica}" overwrite="true"/>
		<copy file="docs/DML.html" todir="${release.detica}" overwrite="true"/>
		<copy file="test/scripts/applications/descriptivestats/Categorical.dml" todir="${release.detica}/DMLScripts/descriptivestats" overwrite="true"/>
		<copy file="test/scripts/applications/descriptivestats/Scale.dml" todir="${release.detica}/DMLScripts/descriptivestats" overwrite="true"/>
		<copy file="test/scripts/applications/descriptivestats/CategoricalCategorical.dml" todir="${release.detica}/DMLScripts/descriptivestats" overwrite="true"/>
		<copy file="test/scripts/applications/descriptivestats/ScaleScale.dml" todir="${release.detica}/DMLScripts/descriptivestats" overwrite="true"/>
		<copy file="test/scripts/applications/descriptivestats/ScaleCategorical.dml" todir="${release.detica}/DMLScripts/descriptivestats" overwrite="true"/>
		<copy file="test/scripts/applications/descriptivestats/OrdinalOrdinal.dml" todir="${release.detica}/DMLScripts/descriptivestats" overwrite="true"/>
		<copy file="test/scripts/applications/gnmf/GNMF.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<copy file="test/scripts/applications/hits/HITS.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<copy file="test/scripts/applications/l2svm/L2SVM.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<copy file="test/scripts/applications/linear_regression/LinearRegression.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<copy file="test/scripts/applications/linearLogReg/LinearLogReg.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<copy file="test/scripts/applications/page_rank/PageRank.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<copy file="test/scripts/functions/external/kMeans.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<copy file="test/scripts/functions/external/Outlier.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<copy file="test/scripts/functions/external/SeqMiner.dml" todir="${release.detica}/DMLScripts" overwrite="true"/>
		<tar basedir="${release.detica}" destfile="${release.detica}/../machine-learning.tar.gz" compression="gzip"/>
	</target>
	
	<!-- Target for SystemML applications -->
	<target name="apps" depends="jar">
		<ant antfile="../ExecRApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../GenerateMetadataApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../FilterProjectApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../EnhanceMetadataApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../RecodeApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../LinearRegressionApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../LinearRegressionScoreApp/build/build.xml" 
             target="buildAppZipFile" 
		     inheritAll="false">
		</ant>
		<ant antfile="../LinearLogisticRegressionApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../LinearLogisticRegressionScoreApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../MultiClassSVMApp/build/build.xml" 
		     target="buildAppZipFile" 
			 inheritAll="false">
		</ant>
		<ant antfile="../MultiClassSVMScoreApp/build/build.xml" 
		     target="buildAppZipFile" 
		     inheritAll="false">
		</ant>
		<ant antfile="../FrequentSequenceMinerApp/build/build.xml" 
			     target="buildAppZipFile" 
			     inheritAll="false">
		</ant>
		<ant antfile="../GNMFApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../UnivariateStatsApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../UnivariateDecodeApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../BivariateStatsApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../BivariateDecodeApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../PivotApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
		<ant antfile="../UnPivotApp/build/build.xml" 
             target="buildAppZipFile" 
			 inheritAll="false">
   		</ant>
	</target>
		
	<!-- Target for Nov. 2012 release -->
	<target name="2012_Nov" depends="apps">
		<delete dir="${release.2012_Nov}" failonerror="false" />
		<mkdir dir="${release.2012_Nov}" />
		<copy file="${build.folder}/${build.jarnamerun}" todir="${release.2012_Nov}" overwrite="true"/>
		<copy file="${build.configfile}" todir="${release.2012_Nov}" overwrite="true"/>
		<tar basedir="${release.2012_Nov}" 
			 destfile="${release.2012_Nov}/${build.configjartgz}" 
			 compression="gzip"/>
        <mkdir dir="${release.2012_Nov}/Apps" />
		<copy file="../ExecRApp/build/ExecRApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
        <copy file="../GenerateMetadataApp/build/GenerateMetadataApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../FilterProjectApp/build/FilterProjectApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
        <copy file="../EnhanceMetadataApp/build/EnhanceMetadataApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../RecodeApp/build/RecodeApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
        <copy file="../LinearRegressionApp/build/LinearRegressionApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../LinearRegressionScoreApp/build/LinearRegressionScoreApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
        <copy file="../LinearLogisticRegressionApp/build/LinearLogisticRegressionApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../LinearLogisticRegressionScoreApp/build/LinearLogisticRegressionScoreApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../MultiClassSVMApp/build/MultiClassSVMApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../MultiClassSVMScoreApp/build/MultiClassSVMScoreApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../FrequentSequenceMinerApp/build/FrequentSequenceMinerApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
        <copy file="../GNMFApp/build/GNMFApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../UnivariateStatsApp/build/UnivariateStatsApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
        <copy file="../UnivariateDecodeApp/build/UnivariateDecodeApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../BivariateStatsApp/build/BivariateStatsApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
        <copy file="../BivariateDecodeApp/build/BivariateDecodeApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../PivotApp/build/PivotApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
		<copy file="../UnPivotApp/build/UnPivotApp.zip" todir="${release.2012_Nov}/Apps" overwrite="true"/>
	</target>
	
	<target name="auto">
		<antcall target="clean" />
		<antcall target="build" />
		<antcall target="junitjar" />
		<antcall target="junitall" />
		<antcall target="junitreport" />
	</target>
	
	<target name="autocluster">
		<antcall target="deleteall" />
		<antcall target="build" />
		<antcall target="junitjar" />
		<antcall target="hdfstestdataupload" />
		<antcall target="junitall" />
		<antcall target="junitreport" />
		<antcall target="hdfstestdataremove" />
	</target>
	
	<target name="junitjar">
		<copy includeemptydirs="false" todir="${build.folder}/lib">
			<fileset dir="${build.ownlib}">
				<include name="nimble.jar" />
				<!-- TZ: I do not think we need them. Let's comment out first.
				<include name="lapack_simple.jar" />
				<include name="netlib-java-0.9.2.jar" />
				<include name="arpack-combo-0.1.jar" />
				<include name="grappa_vis.jar" />
				-->
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${build.folder}/lib">
			<fileset dir="${build.sharedlib}">
				<include name="JSON4J.jar" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${build.folder}/lib">
			<fileset dir="${hadoop.local.path}/lib">
				<include name="commons-math-2.2.jar" /> <!-- This will be removed once we use BI 2.0 cluster -->
			</fileset>
		</copy>
		<jar jarfile="${build.folder}/${build.jarnamejunit}" basedir="${build.folder}">
			<manifest>
				<section name="versioninfo">
					<attribute name="SystemML" value="${systemml.version}" />
					<attribute name="BuildTime" value="${release.timestamp}" />
					<attribute name="Builtby" value="${user.name}" />
					<attribute name="ReleaseNotes" value="${release.notes}" />
				</section>
			</manifest>
		</jar>
	</target>
	
	<target name="junitall">
		<mkdir dir="${junit.output.dir}" />
		<if>
			<equals arg1="${general.localmode}" arg2="true" />
			<then>
				<property name="hadoop.jvmargs.using" value="${hadoop.jvmargs.localmode}" />
				<property name="hadoop.path.using" value="${hadoop.local.path}" />
				<path id="TEST.classpath">
					<pathelement location="${build.folder}/${build.jarnamejunit}" />
					<pathelement location="${hadoop.local.path}" />
					<path refid="DML.classpath" />
				</path>
			</then>
			<else>
				<property name="hadoop.jvmargs.using" value="${hadoop.jvmargs.cluster}" />
				<property name="hadoop.path.using" value="${hadoop.cluster.path}" />
				<path id="TEST.classpath">
					<pathelement location="${build.folder}/${build.jarnamejunit}" />
					<pathelement location="${hadoop.cluster.path}" />
					<path refid="DML.classpath" />
				</path>
			</else>
		</if>
		<junit fork="yes" printsummary="withOutAndErr" jvm="java">
			<formatter type="xml" />
			<batchtest fork="yes" todir="${junit.output.dir}">
				<fileset dir="${build.folder}" includes="**/*Test.class">
					<exclude name="**/runtime/test/*" />
					<exclude name="**/test/integration/functions/external/Eigen*" />
					<exclude name="**/test/integration/functions/external/SGDMF*" />
					<exclude name="**/test/integration/applications/NMF*" />
				</fileset>
			</batchtest>
			<jvmarg line="${hadoop.jvmargs.using}" />
			<classpath refid="TEST.classpath" />
		</junit>
	</target>
	
	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.report.dir}" />
		</junitreport>
	</target>
	
	<target name="hdfstestdataupload">
		<!--will be executed successfully only on cluster or in general on linux OS -->
		<java classname="com.ibm.bi.dml.test.utils.HDFSFileUploader" classpath="${build.folder}" />
	</target>
	
	<target name="hdfstestdataremove">
		<!--will be executed successfully only on cluster or in general on linux OS -->
		<exec executable="hadoop" failonerror="false">
			<arg value="fs" />
			<arg value="-rmr" />
			<arg value="-skipTrash" />
			<arg value="${hadoop.hdfs.basepath}/test/scripts/" />
		</exec>
	</target>
	
</project>
