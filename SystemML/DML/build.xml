<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Ant script to build and test systemml-->
<project basedir="." default="build" name="DML">
	<property environment="env" />
	<property name="junit.output.dir" value="junit" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target" value="1.6" />
	<property name="source" value="1.6" />

	<property file="build.prop" />
	<property name="junit.antlibpathname" value="${general.libpath}/junit.jar" />
	<property name="junit.report.dir" value="junit_reports" />

	<tstamp>
		<format property="release.timestamp" pattern="yyyyMMdd" locale="en,UK" />
	</tstamp>

	<path id="general.classpath">
		<fileset dir="${general.libpath}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- load the svn task -->
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="general.classpath" />
	<!-- load the var task -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="general.classpath" />

	<!-- add jar file to JUNIT's classpath -->
	<path id="JUnit 4.libraryclasspath">
		<pathelement location="${junit.antlibpathname}" />
	</path>
	<path id="BASE.classpath">
		<pathelement location="lib/commons-cli-2.0-SNAPSHOT.jar" />
		<pathelement location="lib/commons-logging-1.0.4.jar" />
		<pathelement location="lib/commons-httpclient-3.0.1.jar" />             
		<pathelement location="lib/commons-math-2.2.jar" />   <!-- for math computations -->
		<pathelement location="lib/log4j-1.2.15.jar" />       <!-- for logging setup in DMLScript -->
		<pathelement location="lib/arpack-combo-0.1.jar" />   <!-- for intW in EigenWrappper -->
		<pathelement location="lib/netlib-java-0.9.2.jar" />  <!-- for using lapack etc., mainly used by nimble-related stuff -->
		<pathelement location="lib/nimble.jar" />             
		<pathelement location="lib/lapack_simple.jar" />      <!-- for eigen value decomposition -->
		<pathelement location="lib/JSON4J.jar" />             <!-- for processing matrix metadata files -->
		<pathelement location="lib/jaql.jar" />               <!-- for dml/api.JaqlUdf -->
		<pathelement location="lib/grappa_vis.jar" />         <!-- for visualizing HOP/LOP DAGs. SHOULD NOT BE SHIPPED. -->
		<path refid="JUnit 4.libraryclasspath" />
	</path>
	<!-- only used in local mode and for compiling source -->
	<path id="DML.classpath">
		<pathelement location="${hadoop.local.path}" />
		<path refid="BASE.classpath" />
	</path>
	<target name="init" depends="clean">
		<mkdir dir="${build.folder}" />
		<copy includeemptydirs="false" todir="${build.folder}">
			<fileset dir="src">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${build.folder}">
			<fileset dir="examples">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${build.folder}">
			<fileset dir="test">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
				<exclude name="scripts/" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${build.folder}">
			<fileset dir="test_integration">
				<exclude name="**/*.launch" />
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>
	<target name="deleteall">
		<delete includeemptydirs="true">
			<fileset dir="lib" defaultexcludes="false">
				<include name="**/.svn/**" />
			</fileset>
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="." defaultexcludes="false">
				<include name="**/*/**" />
				<exclude name="build.prop" />
				<exclude name="build.xml" />
				<exclude name="lib/ant/**" />
			</fileset>
		</delete>
	</target>
	<target name="clean">
		<delete dir="${build.folder}" failonerror="false" />
		<delete dir="junit" failonerror="false" />
		<delete dir="junit_reports" failonerror="false" />
	</target>
	<target depends="build-subprojects,build-project" name="build" />
	<target name="build-subprojects" />
	<!-- Make sure javacc is called to generate parser -->
	<target name="parser"> 
		<echo message="Running JavaCC on DMLQLParser.jj"/>
		<javacc target="src/dml/parser/DMLQLParser.jj"
		        javacchome="${build.sharedlib}/javacc"/>
	</target>
	<target depends="parser,init" name="build-project">
		<echo message="${ant.project.name}: ${ant.file}" />
		<!-- Double check the java compiler version -->
		<echo message="Using java version ${ant.java.version}."/> 
		<javac debug="true" debuglevel="${debuglevel}" destdir="${build.folder}" source="${source}" target="${target}">
			<src path="src" />
			<classpath refid="DML.classpath" />
		</javac>
		<javac debug="true" debuglevel="${debuglevel}" destdir="${build.folder}" source="${source}" target="${target}">
			<src path="examples" />
			<classpath refid="DML.classpath" />
		</javac>
		<javac debug="true" debuglevel="${debuglevel}" destdir="${build.folder}" source="${source}" target="${target}">
			<src path="test" />
			<exclude name="scripts/" />
			<classpath refid="DML.classpath" />
		</javac>
		<javac debug="true" debuglevel="${debuglevel}" destdir="${build.folder}" source="${source}" target="${target}" excludes="**/test/integration/alpha/**">
			<src path="test_integration" />
			<classpath refid="DML.classpath" />
		</javac>

	</target>
	<target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects" />
	<target name="junitall">
		<mkdir dir="${junit.output.dir}" />
		<if>
			<equals arg1="${general.localmode}" arg2="true" />
			<then>
				<property name="hadoop.jvmargs.using" value="${hadoop.jvmargs.localmode}" />
				<property name="hadoop.path.using" value="${hadoop.local.path}" />
				<path id="TEST.classpath">
					<pathelement location="${build.folder}/${build.jarnamejunit}" />
					<pathelement location="${hadoop.local.path}" />
					<path refid="BASE.classpath" />
				</path>
			</then>
			<else>
				<property name="hadoop.jvmargs.using" value="${hadoop.jvmargs.cluster}" />
				<property name="hadoop.path.using" value="${hadoop.cluster.path}" />
				<path id="TEST.classpath">
					<pathelement location="${build.folder}/${build.jarnamejunit}" />
					<pathelement location="${hadoop.cluster.path}" />
					<path refid="BASE.classpath" />
				</path>
			</else>
		</if>
		<junit fork="yes" printsummary="withOutAndErr" jvm="java">
			<formatter type="xml" />
			<batchtest fork="yes" todir="${junit.output.dir}">
				<fileset dir="${build.folder}" includes="**/*Test.class">
					<exclude name="**/test/components/**" />
					<exclude name="**/runtime/**" />
					<exclude name="**/test_integration/applications/descriptivestats/**" />
					<exclude name="**/test_integration/applications/HITS*" />
					<exclude name="**/test_integration/applications/L*" />
					<exclude name="**/test_integration/applications/NMF*" />
					<exclude name="**/test_integration/functions/**" />
				</fileset>
			</batchtest>
			<jvmarg line="${hadoop.jvmargs.using}" />
			<classpath refid="TEST.classpath" />
		</junit>
	</target>
	<target name="junitreport">
		<junitreport todir="${junit.output.dir}">
			<fileset dir="${junit.output.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.report.dir}" />
		</junitreport>
	</target>
	<target name="junitjar">
		<copy includeemptydirs="false" todir="${build.folder}/lib">
			<fileset dir="lib">
				<include name="commons-math-2.2.jar" />
				<include name="nimble.jar" />
				<include name="JSON4J.jar" />
				<!--
				<include name="lapack_simple.jar" />
				<include name="netlib-java-0.9.2.jar" />
				<include name="arpack-combo-0.1.jar" />
				<include name="grappa_vis.jar" />
				-->
			</fileset>
		</copy>
		<jar jarfile="${build.folder}/${build.jarnamejunit}" basedir="${build.folder}">
			<manifest>
				<section name="versioninfo">
					<attribute name="SystemML" value="${systemml.version}" />
					<attribute name="BuildTime" value="${release.timestamp}" />
					<attribute name="Builtby" value="${user.name}" />
					<attribute name="ReleaseNotes" value="${release.notes}" />
				</section>
			</manifest>
		</jar>
	</target>
	<!-- Make sure jar depends on build -->
	<target name="jar" depends="build">
		<copy includeemptydirs="false" todir="${build.folder}/lib">
			<fileset dir="lib">
				<include name="commons-math-2.2.jar" />
				<include name="nimble.jar" />
				<include name="JSON4J.jar" />
				<!--
				<include name="lapack_simple.jar" />
				<include name="netlib-java-0.9.2.jar" />
				<include name="arpack-combo-0.1.jar" />
				<include name="grappa_vis.jar" />
				-->
			</fileset>
		</copy>
		<jar jarfile="${build.folder}/${build.jarnamerun}" basedir="${build.folder}">
			<exclude name="dml/test/**" />
			<exclude name="gnmf/**" />
			<exclude name="dml/runtime/test/**" />
			<manifest>
				<attribute name="Class-Path" value="./" />
				<attribute name="Main-Class" value="dml.api.DMLScript" />
				<section name="versioninfo">
					<attribute name="SystemML" value="${systemml.version}" />
					<attribute name="BuildTime" value="${release.timestamp}" />
					<attribute name="Builtby" value="${user.name}" />
					<attribute name="ReleaseNotes" value="${release.notes}" />
				</section>
			</manifest>
		</jar>
	</target>
	<target name="hdfstestdataupload">
		<!--will be executed successfully only on cluster or in general on linux OS 
		<exec executable="bash" failonerror="false">
			<arg value="" />
		</exec>-->
		<java classname="dml.test.utils.HDFSFileUploader" classpath="${build.folder}" />
	</target>
	<target name="hdfstestdataremove">
		<!--will be executed successfully only on cluster or in general on linux OS -->
		<exec executable="hadoop" failonerror="false">
			<arg value="fs" />
			<arg value="-rmr" />
			<arg value="-skipTrash" />
			<arg value="${hadoop.hdfs.basepath}/test/scripts/" />
		</exec>
	</target>
	<target name="auto">
		<antcall target="clean" />
		<antcall target="build" />
		<antcall target="junitjar" />
		<antcall target="junitall" />
		<antcall target="junitreport" />
	</target>
	<target name="autocluster">
		<antcall target="deleteall" />
		<antcall target="build" />
		<antcall target="junitjar" />
		<antcall target="hdfstestdataupload" />
		<antcall target="junitall" />
		<antcall target="junitreport" />
		<antcall target="hdfstestdataremove" />
	</target>
</project>
