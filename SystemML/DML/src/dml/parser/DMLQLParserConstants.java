/* Generated By:JavaCC: Do not edit this line. DMLQLParserConstants.java */
package dml.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DMLQLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int FUNCTION = 14;
  /** RegularExpression Id. */
  int EXTERNALFUNCTION = 15;
  /** RegularExpression Id. */
  int IMPLEMENTED = 16;
  /** RegularExpression Id. */
  int FOR = 17;
  /** RegularExpression Id. */
  int PARFOR = 18;
  /** RegularExpression Id. */
  int IN = 19;
  /** RegularExpression Id. */
  int TRUE = 20;
  /** RegularExpression Id. */
  int FALSE = 21;
  /** RegularExpression Id. */
  int NULL = 22;
  /** RegularExpression Id. */
  int SEQ = 23;
  /** RegularExpression Id. */
  int AS = 24;
  /** RegularExpression Id. */
  int RETURN = 25;
  /** RegularExpression Id. */
  int TRAIN = 26;
  /** RegularExpression Id. */
  int TEST = 27;
  /** RegularExpression Id. */
  int AGG = 28;
  /** RegularExpression Id. */
  int BUILD = 29;
  /** RegularExpression Id. */
  int ON = 30;
  /** RegularExpression Id. */
  int USE = 31;
  /** RegularExpression Id. */
  int COS = 32;
  /** RegularExpression Id. */
  int SIN = 33;
  /** RegularExpression Id. */
  int TAN = 34;
  /** RegularExpression Id. */
  int DIAG = 35;
  /** RegularExpression Id. */
  int EXP = 36;
  /** RegularExpression Id. */
  int ABS = 37;
  /** RegularExpression Id. */
  int MIN = 38;
  /** RegularExpression Id. */
  int MAX = 39;
  /** RegularExpression Id. */
  int PMIN = 40;
  /** RegularExpression Id. */
  int PMAX = 41;
  /** RegularExpression Id. */
  int PPRED = 42;
  /** RegularExpression Id. */
  int LOG = 43;
  /** RegularExpression Id. */
  int LENGTH = 44;
  /** RegularExpression Id. */
  int NCOL = 45;
  /** RegularExpression Id. */
  int NROW = 46;
  /** RegularExpression Id. */
  int SQRT = 47;
  /** RegularExpression Id. */
  int SUM = 48;
  /** RegularExpression Id. */
  int MEAN = 49;
  /** RegularExpression Id. */
  int TRANS = 50;
  /** RegularExpression Id. */
  int APPEND = 51;
  /** RegularExpression Id. */
  int RANGE = 52;
  /** RegularExpression Id. */
  int PROD = 53;
  /** RegularExpression Id. */
  int ROWSUM = 54;
  /** RegularExpression Id. */
  int COLSUM = 55;
  /** RegularExpression Id. */
  int ROWMIN = 56;
  /** RegularExpression Id. */
  int COLMIN = 57;
  /** RegularExpression Id. */
  int ROWMAX = 58;
  /** RegularExpression Id. */
  int ROWINDEXMAX = 59;
  /** RegularExpression Id. */
  int COLMAX = 60;
  /** RegularExpression Id. */
  int ROWMEAN = 61;
  /** RegularExpression Id. */
  int COLMEAN = 62;
  /** RegularExpression Id. */
  int TRACE = 63;
  /** RegularExpression Id. */
  int READMATRIX = 64;
  /** RegularExpression Id. */
  int WRITEMATRIX = 65;
  /** RegularExpression Id. */
  int IMPORT = 66;
  /** RegularExpression Id. */
  int DMLPATH = 67;
  /** RegularExpression Id. */
  int PRINT = 68;
  /** RegularExpression Id. */
  int AVG = 69;
  /** RegularExpression Id. */
  int RAND = 70;
  /** RegularExpression Id. */
  int CAST_AS_SCALAR = 71;
  /** RegularExpression Id. */
  int QUANTILE = 72;
  /** RegularExpression Id. */
  int INTERQUANTILE = 73;
  /** RegularExpression Id. */
  int IQM = 74;
  /** RegularExpression Id. */
  int CTABLE = 75;
  /** RegularExpression Id. */
  int SPEARMAN = 76;
  /** RegularExpression Id. */
  int ROUND = 77;
  /** RegularExpression Id. */
  int CENTRALMOMENT = 78;
  /** RegularExpression Id. */
  int COVARIANCE = 79;
  /** RegularExpression Id. */
  int CDF = 80;
  /** RegularExpression Id. */
  int GROUPEDAGG = 81;
  /** RegularExpression Id. */
  int PLUS = 82;
  /** RegularExpression Id. */
  int MINUS = 83;
  /** RegularExpression Id. */
  int MULT = 84;
  /** RegularExpression Id. */
  int DIV = 85;
  /** RegularExpression Id. */
  int MATRIXMULT = 86;
  /** RegularExpression Id. */
  int POWER = 87;
  /** RegularExpression Id. */
  int LESSEQUAL = 88;
  /** RegularExpression Id. */
  int LESS = 89;
  /** RegularExpression Id. */
  int GREATEREQUAL = 90;
  /** RegularExpression Id. */
  int GREATER = 91;
  /** RegularExpression Id. */
  int EQUAL = 92;
  /** RegularExpression Id. */
  int NOTEQUAL = 93;
  /** RegularExpression Id. */
  int ASSIGN = 94;
  /** RegularExpression Id. */
  int LEFTASSIGN = 95;
  /** RegularExpression Id. */
  int CONDITIONALAND = 96;
  /** RegularExpression Id. */
  int LOGICALAND = 97;
  /** RegularExpression Id. */
  int CONDITIONALOR = 98;
  /** RegularExpression Id. */
  int LOGICALOR = 99;
  /** RegularExpression Id. */
  int NOT = 100;
  /** RegularExpression Id. */
  int SEMICOLON = 101;
  /** RegularExpression Id. */
  int COLON = 102;
  /** RegularExpression Id. */
  int LEFTPAREN = 103;
  /** RegularExpression Id. */
  int RIGHTPAREN = 104;
  /** RegularExpression Id. */
  int COMMA = 105;
  /** RegularExpression Id. */
  int LEFTCURLYPAREN = 106;
  /** RegularExpression Id. */
  int RIGHTCURLYPAREN = 107;
  /** RegularExpression Id. */
  int LEFTSQUARE = 108;
  /** RegularExpression Id. */
  int RIGHTSQUARE = 109;
  /** RegularExpression Id. */
  int ID = 110;
  /** RegularExpression Id. */
  int DOLLAR_ID = 111;
  /** RegularExpression Id. */
  int INTEGER = 112;
  /** RegularExpression Id. */
  int DOUBLE = 113;
  /** RegularExpression Id. */
  int DBLQUOTE_STRING_LITERAL = 114;
  /** RegularExpression Id. */
  int SQL_STRING_LITERAL = 115;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"#\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 7>",
    "\"/*\"",
    "<token of kind 9>",
    "\"*/\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"function\"",
    "\"externalFunction\"",
    "\"implemented\"",
    "\"for\"",
    "\"parfor\"",
    "\"in\"",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"seq\"",
    "\"as\"",
    "\"return\"",
    "\"train\"",
    "\"test\"",
    "\"aggregate\"",
    "\"build\"",
    "\"on\"",
    "\"use\"",
    "\"cos\"",
    "\"sin\"",
    "\"tan\"",
    "\"diag\"",
    "\"exp\"",
    "\"abs\"",
    "\"min\"",
    "\"max\"",
    "\"pmin\"",
    "\"pmax\"",
    "\"ppred\"",
    "\"log\"",
    "\"length\"",
    "\"ncol\"",
    "\"nrow\"",
    "\"sqrt\"",
    "\"sum\"",
    "\"mean\"",
    "\"t\"",
    "\"append\"",
    "\"range\"",
    "\"prod\"",
    "\"rowSums\"",
    "\"colSums\"",
    "\"rowMins\"",
    "\"colMins\"",
    "\"rowMaxs\"",
    "\"rowIndexMax\"",
    "\"colMaxs\"",
    "\"rowMeans\"",
    "\"colMeans\"",
    "\"trace\"",
    "\"read\"",
    "\"write\"",
    "\"import\"",
    "\"dml-path\"",
    "\"print\"",
    "\"avg\"",
    "\"Rand\"",
    "\"castAsScalar\"",
    "\"quantile\"",
    "\"interQuantile\"",
    "\"interQuartileMean\"",
    "\"ctable\"",
    "\"spearman\"",
    "\"round\"",
    "\"centralMoment\"",
    "\"cov\"",
    "\"cumulativeProbability\"",
    "\"groupedAggregate\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%*%\"",
    "\"^\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"==\"",
    "\"!=\"",
    "\"=\"",
    "\"<-\"",
    "\"&&\"",
    "\"&\"",
    "\"||\"",
    "\"|\"",
    "\"!\"",
    "\";\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<ID>",
    "<DOLLAR_ID>",
    "<INTEGER>",
    "<DOUBLE>",
    "<DBLQUOTE_STRING_LITERAL>",
    "<SQL_STRING_LITERAL>",
  };

}
