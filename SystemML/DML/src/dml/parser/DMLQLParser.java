/* Generated By:JavaCC: Do not edit this line. DMLQLParser.java */
package dml.parser;

import java.io.*;
import java.util.*;
import dml.parser.Expression.DataType;
import dml.parser.Expression.ValueType;
import dml.parser.Expression.FormatType;
import dml.parser.Expression.BinaryOp;
import dml.utils.LanguageException;
import java.util.ArrayList;

/**
 * Main entry point for the DML QL file parser.
 * 
 * NOTE: This class is GENERATED from DMLQLParser.jj!!!
 */
public class DMLQLParser extends DMLQLParserBase implements DMLQLParserConstants {

 /** stores the listing of command-line arguments, which are indexed from 1 and being with '$' --  $1, $2, etc. **/
 private HashMap<String,String> commandArgs;

 /** stores list of paths to DML packages (directories to look for modules) **/
 private ArrayList<String> dmlPathSet;

 private boolean alreadySeen = false;

 /** stores the mapping of absolute path to namespace program **/
 /** if the module in the absolute path has been processed, then use this program  **/
 static private HashMap<String, DMLProgram> allNamespacesByAbsolutePath = new HashMap<String, DMLProgram>();

 /** Convenience constructor for reading from a string. */
 public DMLQLParser(String s)throws IOException, ParseException {
  this(new StringReader(s));
 }

 /** Convenience constructor for reading from a string. */
 public DMLQLParser(String s2, String encoding, HashMap<String,String> commandArgs)throws IOException, ParseException {

  this(new BufferedReader(new StringReader(s2)));
  setFileEncoding(encoding);
        setCommandArgs(commandArgs);

  // initialize pathset to current working directory
  dmlPathSet = new ArrayList<String>();
        dmlPathSet.add(".");
        alreadySeen = false;
 }

 public DMLQLParser(File f, String encoding, HashMap<String,String> commandArgs)throws IOException, ParseException {

  this(new BufferedReader(new InputStreamReader(new FileInputStream(f), encoding)));
        setFileEncoding(encoding);
        setCommandArgs(commandArgs);

  // initialize pathset to current working directory
  dmlPathSet = new ArrayList<String>();
      dmlPathSet.add(".");

  if (DMLQLParser.allNamespacesByAbsolutePath.get(f.getAbsolutePath()) != null)
   alreadySeen = true;
  else {
   alreadySeen = false;
   DMLQLParser.allNamespacesByAbsolutePath.put(f.getAbsolutePath(), new DMLProgram());
      }
 }

 private void setCommandArgs(HashMap<String,String> ca){
  commandArgs = ca;
 }

 private void setDmlPathSet(ArrayList<String> passed){
  dmlPathSet = passed;
 }

 public DMLQLParser(File f, HashMap<String,String> commandArgs)throws IOException, ParseException {
  this(f, DEFAULT_ENCODING, commandArgs);
 }

 public DMLQLParser(String s2, HashMap<String,String> commandArgs)throws IOException, ParseException {
  this(s2, DEFAULT_ENCODING, commandArgs);
 }

 public static final String LANG_JAVA = "Java";

 private String getTokenInfo(Token t){
         if (t == null)
                return "";
         else
          return "(" + t.toString() + " in line " + t.beginLine + ", column " + t.beginColumn + ")";

    }

  // end TOKEN

///////////////////////////////////////////////////////////////////////////////////////////////////
// END LEXER
///////////////////////////////////////////////////////////////////////////////////////////////////
  final public DMLProgram __inputInternal() throws ParseException {
 DMLProgram dmlp = new DMLProgram();
 Statement current = null;
 Token reserved = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DMLPATH:
        current = PathStatement();
        break;
      case IMPORT:
        current = ImportStatement();
        break;
      default:
        jj_la1[0] = jj_gen;
        if (jj_2_1(2147483647)) {
          current = RandStatement();
        } else if (jj_2_2(3)) {
          current = AssignmentStatement();
        } else if (jj_2_3(3)) {
          current = MultiAssignmentStatement();
        } else if (jj_2_4(3)) {
          current = InputStatement();
        } else if (jj_2_5(3)) {
          current = FunctionStatement();
        } else if (jj_2_6(3)) {
          current = ExternalFunctionStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WRITEMATRIX:
            current = OutputStatement();
            break;
          case PRINT:
            current = PrintStatement();
            break;
          case WHILE:
            current = WhileStatement();
            break;
          case FOR:
            current = ForStatement();
            break;
          case IF:
            current = IfStatement();
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
   StatementBlock sb = null;
   if (current instanceof WhileStatement) {
    sb = new WhileStatementBlock();
   }
   // TODO: MATTHIAS UNCOMMENT
   //else if (current instanceof ParForStatement) {
   // sb = new ParForStatementBlock();
   //}
   else if (current instanceof ForStatement) {
    sb = new ForStatementBlock();
   }
   else if (current instanceof IfStatement){
    sb = new IfStatementBlock();
   }
  // else if (current instanceof CVStatement) {
  //  sb = new CVStatementBlock();
  // }
  // else if (current instanceof ELStatement) {
  //  sb = new ELStatementBlock();
  // }
  // else if (current instanceof ELUseStatement) {
  //  sb = new ELUseStatementBlock();
  // }   
   else if (current instanceof FunctionStatement) {
    sb = new FunctionStatementBlock();
   }
   else {
    sb = new StatementBlock();
   }
   sb.addStatement(current);

   // handle import statements
   if (current instanceof ImportStatement)
   {
    // if the path verifies, parse the file to create a DMLProgram
    ImportStatement importStmt = (ImportStatement) sb.getStatement(0);
    if (importStmt.verify(dmlPathSet)) {

     try {
        DMLProgram importedProg = null;
      File moduleFile = new File(importStmt.getCompletePath());
      System.out.println("INFO: importing module file: " + ((ImportStatement)current).getCompletePath());



      //if (DMLQLParser.allNamespacesByAbsolutePath.get(((ImportStatement)current).getAbsolutePath()) == null){  
      DMLQLParser parser = new DMLQLParser(moduleFile,null);
      if (parser.alreadySeen)
       importedProg = DMLQLParser.allNamespacesByAbsolutePath.get(((ImportStatement)current).getAbsolutePath());
      else {
       importedProg = parser.parse();
       DMLQLParser.allNamespacesByAbsolutePath.put(((ImportStatement)current).getAbsolutePath(), importedProg);

      }

      // set the key to be the name of the module or the alias
      String namespaceKey = (importStmt.getAlias() == null) ? importStmt.getModuleName() : importStmt.getAlias();

      // IF (alias is defined OR no filter placed on functions to import) THEN
      //  1) attempt to create new namespace for imported DML module file if not already defined
      //  2) attempt to add functions to existing namespace
      if (importStmt.getAlias() != null || ( !importStmt.getImportAll() && importStmt.getImportVarList().size() == 0)){

       if (!dmlp.getNamespaces().containsKey(namespaceKey))
          dmlp.getNamespaces().put(namespaceKey,importedProg);

       else {
        // attempt to import the new functions in the importedProgram (DML file specified in import statement) into the existing namespace
        for (String fname : importedProg.getFunctionStatementBlocks(null).keySet()){
         if (dmlp.getFunctionStatementBlock(namespaceKey,fname) != null)
          {if (true) throw new ParseException("function " + fname + " already defined in namespace " + namespaceKey);}
         else
          dmlp.getFunctionStatementBlocks(namespaceKey).put(fname, importedProg.getFunctionStatementBlock(null, fname));
        }
       }
      }

      // import all functions into the current "null" namespace
      if(importStmt.getImportAll()){
       for (String fname : importedProg.getFunctionStatementBlocks(null).keySet()){
        if (dmlp.getFunctionStatementBlocks(null).containsKey(fname))
         {if (true) throw new ParseException("function " + fname + " is already defined in current namespace ");}
        String currName = (importStmt.getAlias() == null) ? null : importStmt.getAlias();
        dmlp.getFunctionStatementBlocks(currName).put(fname,importedProg.getFunctionStatementBlocks(null).get(fname));
       }
      }

      // import named functions into current namespace. Named functions must NOT exist in current namespace ("null" namespace).
      else if (importStmt.getImportVarList().size() > 0){
       for (String fname : importStmt.getImportVarList()) {
        if (dmlp.getFunctionStatementBlocks(null).containsKey(fname))
         {if (true) throw new ParseException("function " + fname + " is already defined in current namespace ");}
        if (!importedProg.getFunctionStatementBlocks(null).containsKey(fname))
         {if (true) throw new ParseException("function " + fname + " not defined in module path " + importStmt.getModulePath());}
        String currName = (importStmt.getAlias() == null) ? null : importStmt.getAlias();
        dmlp.getFunctionStatementBlocks(currName).put(fname,importedProg.getFunctionStatementBlocks(null).get(fname));
       }
      }
     }
     catch(Exception e){
      {if (true) throw new ParseException(e.getMessage());}
     }
    } // if (importStmt.verify(dmlPathSet))

    else {
     {if (true) throw new ParseException("failed to import  " + importStmt.toString());}
    }

    // add import statement to DML program
    dmlp.addStatementBlock(sb);

   } // if (current instanceof ImportStatement)

   // handle function declarations
   else if (sb instanceof FunctionStatementBlock) {
      FunctionStatement first  = (FunctionStatement)((FunctionStatementBlock)sb)._statements.get(0);
    try {
      // check if the function is defined in the current namespace
      if (dmlp.getFunctionStatementBlocks(null).containsKey(first.getName()))
        {if (true) throw new LanguageException("function " + first.getName() + " already defined in current namespace ");}
      dmlp.getFunctionStatementBlocks(null).put(first.getName(), (FunctionStatementBlock)sb);
    } catch (LanguageException e) {
     {if (true) throw new ParseException(e.getMessage());}
    }
   }
   else {
      dmlp.addStatementBlock(sb);
   }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case WRITEMATRIX:
      case IMPORT:
      case DMLPATH:
      case PRINT:
      case LEFTSQUARE:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  dmlp.mergeStatementBlocks();
  {if (true) return dmlp;}
    throw new Error("Missing return statement in function");
  }

  final public PathStatement PathStatement() throws ParseException {
 Token t1 = null;
 PathStatement pstmt = new PathStatement();
    jj_consume_token(DMLPATH);
    t1 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
   String dequotedString = dequoteStr('\u005c"',t1.image);
     pstmt.addPackagePaths(dequotedString);
   dmlPathSet.addAll(pstmt.getPackagePaths());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  {if (true) return pstmt;}
    throw new Error("Missing return statement in function");
  }

  final public ImportStatement ImportStatement() throws ParseException {
 Token t1 = null, t2 = null, t3 = null, t4 = null;
 ImportStatement importStmt = new ImportStatement();

 // directory structure of DML package containing module being imported
 // last entry is the name of the module.
 ArrayList<String> modulePathPieces = new ArrayList<String>();
    jj_consume_token(IMPORT);
    t1 = jj_consume_token(ID);
                     modulePathPieces.add(t1.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(COLON);
      jj_consume_token(COLON);
      t1 = jj_consume_token(ID);
                             modulePathPieces.add(t1.image);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
      jj_consume_token(LEFTPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case ID:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          t2 = jj_consume_token(MULT);
                  importStmt.setImportAll(true);
          break;
        case ID:
          t3 = jj_consume_token(ID);
                                                               importStmt.addVar(t3.image);
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[5] = jj_gen;
              break label_3;
            }
            jj_consume_token(COMMA);
            t3 = jj_consume_token(ID);
                       importStmt.addVar(t3.image);
          }
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPAREN);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      t4 = jj_consume_token(ID);
                  importStmt.setAlias(t4.image);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  importStmt.setModulePathAndName(modulePathPieces);
  {if (true) return importStmt;}
    throw new Error("Missing return statement in function");
  }

  final public FunctionStatement FunctionStatement() throws ParseException {
  Vector <DataIdentifier> functionInputs = new Vector<DataIdentifier>(), functionOutputs = new Vector<DataIdentifier>() ;
  FunctionStatement fstmt = new FunctionStatement();
  Token t;
  Statement current = null;
    t = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    jj_consume_token(FUNCTION);
    functionInputs = ReadTypedArgList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
      jj_consume_token(RETURN);
      functionOutputs = ReadTypedArgList();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(LEFTCURLYPAREN);
    label_4:
    while (true) {
      if (jj_2_7(2147483647)) {
        current = RandStatement();
      } else if (jj_2_8(3)) {
        current = AssignmentStatement();
      } else if (jj_2_9(3)) {
        current = MultiAssignmentStatement();
      } else if (jj_2_10(3)) {
        current = InputStatement();
      } else if (jj_2_11(3)) {
        current = FunctionStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITEMATRIX:
          current = OutputStatement();
          break;
        case PRINT:
          current = PrintStatement();
          break;
        case WHILE:
          current = WhileStatement();
          break;
        case FOR:
          current = ForStatement();
          break;
        case IF:
          current = IfStatement();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
   StatementBlock sb = null;
   if (current instanceof WhileStatement) {
    sb = new WhileStatementBlock();
   }
        // TODO: MATTHIAS UNCOMMENT
   //else if (current instanceof ParForStatement) {
   // sb = new ParForStatementBlock();
   //}
   else if (current instanceof ForStatement) {
    sb = new ForStatementBlock();
   }
   else if (current instanceof IfStatement){
    sb = new IfStatementBlock();
   }
   //else if (current instanceof CVStatement) {
   // sb = new CVStatementBlock() ;
   //}
   //else if (current instanceof ELStatement) {
   // sb = new ELStatementBlock() ;
   //}
   //else if (current instanceof ELUseStatement) {
   // sb = new ELUseStatementBlock() ;
   //}
   else if (current instanceof FunctionStatement) {
    {if (true) throw new ParseException(" Nested function definitions are not supported ");}
   }
   else {
    sb = new StatementBlock();
   }
   sb.addStatement(current);
   fstmt.addStatementBlock(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case WRITEMATRIX:
      case PRINT:
      case LEFTSQUARE:
      case ID:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
    }
  fstmt.mergeStatementBlocks();
    jj_consume_token(RIGHTCURLYPAREN);
     fstmt._inputParams = functionInputs ;
     fstmt._outputParams = functionOutputs ;
  fstmt.setName(t.image);
     {if (true) return fstmt;}
    throw new Error("Missing return statement in function");
  }

  final public ExternalFunctionStatement ExternalFunctionStatement() throws ParseException {
  Vector <DataIdentifier> functionInputs = null, functionOutputs = null ;
  ExternalFunctionStatement fstmt = new ExternalFunctionStatement();
  Token t;
  Statement current = null;
  HashMap<String,String> map = null;
    t = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    jj_consume_token(EXTERNALFUNCTION);
    functionInputs = ReadTypedArgList();
    jj_consume_token(RETURN);
    functionOutputs = ReadTypedArgList();
    jj_consume_token(IMPLEMENTED);
    jj_consume_token(IN);
    map = ReadGenericParamList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
     fstmt.setOtherParams(map);
     fstmt._inputParams = functionInputs ;
     fstmt._outputParams = functionOutputs ;
  fstmt.setName(t.image);
     {if (true) return fstmt;}
    throw new Error("Missing return statement in function");
  }

  final public HashMap <String,String > ReadGenericParamList() throws ParseException {
  HashMap<String,String > map = new HashMap<String,String >() ;
  Token t1 = null, t2 = null ;
  IntIdentifier intid = null;
  DoubleIdentifier doubleid = null;
  BooleanIdentifier boolid = null;
    jj_consume_token(LEFTPAREN);
    t1 = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    if (jj_2_12(2)) {
      intid = IntConstant();
                                        map.put(t1.image, intid.toString());
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case DOUBLE:
        doubleid = DoubleConstant();
                                  map.put(t1.image, doubleid.toString());
        break;
      case TRUE:
      case FALSE:
        boolid = BooleanConstant();
                                 map.put(t1.image, boolid.toString());
        break;
      case SQL_STRING_LITERAL:
        t2 = jj_consume_token(SQL_STRING_LITERAL);
                                map.put(t1.image, dequoteStr('\u005c'',t2.image));
        break;
      case DBLQUOTE_STRING_LITERAL:
        t2 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                     map.put(t1.image, dequoteStr('\u005c"',t2.image));
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      t1 = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      if (jj_2_13(2)) {
        intid = IntConstant();
                                        map.put( t1.image, intid.toString());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case DOUBLE:
          doubleid = DoubleConstant();
                                     map.put( t1.image, doubleid.toString());
          break;
        case TRUE:
        case FALSE:
          boolid = BooleanConstant();
                                     map.put( t1.image, boolid.toString());
          break;
        case SQL_STRING_LITERAL:
          t2 = jj_consume_token(SQL_STRING_LITERAL);
                                     map.put( t1.image, dequoteStr('\u005c'',t2.image));
          break;
        case DBLQUOTE_STRING_LITERAL:
          t2 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                     map.put( t1.image, dequoteStr('\u005c"',t2.image));
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RIGHTPAREN);
   {if (true) return  map ;}
    throw new Error("Missing return statement in function");
  }

// NOTE: DML only supports default values for scalar datatype
  final public Vector<DataIdentifier> ReadTypedArgList() throws ParseException {
  Vector<DataIdentifier> params = new Vector<DataIdentifier>() ;
  DataIdentifier d1=null, d2=null ;
  Token t1 = null, t2 = null, t3 = null;
  String valueType = null;
  String dataType = null;
  IntIdentifier intid = null;
  DoubleIdentifier doubleid = null;
  BooleanIdentifier boolid = null;
    jj_consume_token(LEFTPAREN);
    t1 = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTSQUARE:
      jj_consume_token(LEFTSQUARE);
      t2 = jj_consume_token(ID);
      jj_consume_token(RIGHTSQUARE);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    d1 = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS:
    case ASSIGN:
    case DOUBLE:
    case DBLQUOTE_STRING_LITERAL:
    case SQL_STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        intid = IntConstant();
                                      d1.setDefaultValue(intid.toString());
        break;
      case MINUS:
      case DOUBLE:
        doubleid = DoubleConstant();
                                      d1.setDefaultValue(doubleid.toString());
        break;
      case TRUE:
      case FALSE:
        boolid = BooleanConstant();
                                      d1.setDefaultValue(boolid.toString());
        break;
      case SQL_STRING_LITERAL:
        t3 = jj_consume_token(SQL_STRING_LITERAL);
                                      d1.setDefaultValue(dequoteStr('\u005c'',t3.image));
        break;
      case DBLQUOTE_STRING_LITERAL:
        t3 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                         d1.setDefaultValue(dequoteStr('\u005c"',t3.image));
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
      if (t1.image.equalsIgnoreCase("matrix")){
    if (t2 == null){
     {if (true) throw new ParseException("Valuetype must be defined for Matrix datatype -- e.g., Matrix(Double) ");}
    }
    else{
     dataType = "matrix";
     valueType = t2.image;
    }
       }
     else if (t1.image.equalsIgnoreCase("object")){
    dataType = "object";
    valueType = "object";
     }
       else {
         dataType = "scalar";
         valueType = t1.image;
        }
     d1.setTypeInfo(valueType, dataType);
       params.add(d1);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      t1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTSQUARE:
        jj_consume_token(LEFTSQUARE);
        t2 = jj_consume_token(ID);
        jj_consume_token(RIGHTSQUARE);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      d2 = Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case MINUS:
      case ASSIGN:
      case DOUBLE:
      case DBLQUOTE_STRING_LITERAL:
      case SQL_STRING_LITERAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          intid = IntConstant();
                                d2.setDefaultValue(intid.toString());
          break;
        case MINUS:
        case DOUBLE:
          doubleid = DoubleConstant();
                                    d2.setDefaultValue(doubleid.toString());
          break;
        case TRUE:
        case FALSE:
          boolid = BooleanConstant();
                                    d2.setDefaultValue(boolid.toString());
          break;
        case SQL_STRING_LITERAL:
          t3 = jj_consume_token(SQL_STRING_LITERAL);
                                    d2.setDefaultValue(dequoteStr('\u005c'',t3.image));
          break;
        case DBLQUOTE_STRING_LITERAL:
          t3 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                      d2.setDefaultValue(dequoteStr('\u005c"',t3.image));
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
   if (t1.image.equalsIgnoreCase("matrix")){
    if (t2 == null){
     {if (true) throw new ParseException("Valuetype must be defined for Matrix datatype -- e.g., Matrix(Double) ");}
    }
    else{
     dataType = "matrix";
     valueType = t2.image;
    }
     }
   else if (t1.image.equalsIgnoreCase("object")){
    dataType = "object";
    valueType = "object";
   }
     else {
         dataType = "scalar";
         valueType = t1.image;
   }
     d2.setTypeInfo(valueType, dataType);
       params.add(d2);
    }
    jj_consume_token(RIGHTPAREN);
    {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<String> ReadList() throws ParseException {
  ArrayList<String> params = new ArrayList<String>() ;
  Token t1 = null, t2=null ;
    jj_consume_token(LEFTPAREN);
    t1 = jj_consume_token(ID);
             params.add(t1.image);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      t2 = jj_consume_token(ID);
                                                        params.add(t2.image);
    }
    jj_consume_token(RIGHTPAREN);
   {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ArrayList<Expression>> ReadIndexList() throws ParseException {
  ArrayList<ArrayList<Expression>> targetListList = new ArrayList<ArrayList<Expression>>();
  ArrayList<Expression> targetList = new ArrayList<Expression>();
  Expression target = null;
    jj_consume_token(LEFTSQUARE);
    if (jj_2_14(2147483647)) {
      targetList = ColonDelimitedExpression();
                                              targetListList.add(targetList);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case COS:
      case SIN:
      case TAN:
      case DIAG:
      case EXP:
      case ABS:
      case MIN:
      case MAX:
      case PMIN:
      case PMAX:
      case PPRED:
      case LOG:
      case LENGTH:
      case NCOL:
      case NROW:
      case SQRT:
      case SUM:
      case MEAN:
      case TRANS:
      case APPEND:
      case RANGE:
      case PROD:
      case ROWSUM:
      case COLSUM:
      case ROWMIN:
      case COLMIN:
      case ROWMAX:
      case ROWINDEXMAX:
      case COLMAX:
      case ROWMEAN:
      case COLMEAN:
      case TRACE:
      case CAST_AS_SCALAR:
      case QUANTILE:
      case INTERQUANTILE:
      case IQM:
      case CTABLE:
      case SPEARMAN:
      case ROUND:
      case CENTRALMOMENT:
      case COVARIANCE:
      case CDF:
      case GROUPEDAGG:
      case PLUS:
      case MINUS:
      case NOT:
      case LEFTPAREN:
      case ID:
      case DOLLAR_ID:
      case INTEGER:
      case DOUBLE:
      case DBLQUOTE_STRING_LITERAL:
        target = Expression();
         targetList = new ArrayList<Expression>(); targetList.add(target); targetListList.add(targetList);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      if (jj_2_15(2147483647)) {
        targetList = ColonDelimitedExpression();
                                              targetListList.add(targetList);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case COS:
        case SIN:
        case TAN:
        case DIAG:
        case EXP:
        case ABS:
        case MIN:
        case MAX:
        case PMIN:
        case PMAX:
        case PPRED:
        case LOG:
        case LENGTH:
        case NCOL:
        case NROW:
        case SQRT:
        case SUM:
        case MEAN:
        case TRANS:
        case APPEND:
        case RANGE:
        case PROD:
        case ROWSUM:
        case COLSUM:
        case ROWMIN:
        case COLMIN:
        case ROWMAX:
        case ROWINDEXMAX:
        case COLMAX:
        case ROWMEAN:
        case COLMEAN:
        case TRACE:
        case CAST_AS_SCALAR:
        case QUANTILE:
        case INTERQUANTILE:
        case IQM:
        case CTABLE:
        case SPEARMAN:
        case ROUND:
        case CENTRALMOMENT:
        case COVARIANCE:
        case CDF:
        case GROUPEDAGG:
        case PLUS:
        case MINUS:
        case NOT:
        case LEFTPAREN:
        case ID:
        case DOLLAR_ID:
        case INTEGER:
        case DOUBLE:
        case DBLQUOTE_STRING_LITERAL:
          target = Expression();
        targetList = new ArrayList<Expression>(); targetList.add(target); targetListList.add(targetList);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RIGHTSQUARE);
    {if (true) return targetListList;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Expression> ColonDelimitedExpression() throws ParseException {
 ArrayList<Expression> exprsList = new ArrayList<Expression>();
 Expression left = null, right = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case COS:
    case SIN:
    case TAN:
    case DIAG:
    case EXP:
    case ABS:
    case MIN:
    case MAX:
    case PMIN:
    case PMAX:
    case PPRED:
    case LOG:
    case LENGTH:
    case NCOL:
    case NROW:
    case SQRT:
    case SUM:
    case MEAN:
    case TRANS:
    case APPEND:
    case RANGE:
    case PROD:
    case ROWSUM:
    case COLSUM:
    case ROWMIN:
    case COLMIN:
    case ROWMAX:
    case ROWINDEXMAX:
    case COLMAX:
    case ROWMEAN:
    case COLMEAN:
    case TRACE:
    case CAST_AS_SCALAR:
    case QUANTILE:
    case INTERQUANTILE:
    case IQM:
    case CTABLE:
    case SPEARMAN:
    case ROUND:
    case CENTRALMOMENT:
    case COVARIANCE:
    case CDF:
    case GROUPEDAGG:
    case PLUS:
    case MINUS:
    case NOT:
    case LEFTPAREN:
    case ID:
    case DOLLAR_ID:
    case INTEGER:
    case DOUBLE:
    case DBLQUOTE_STRING_LITERAL:
      left = Expression();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case COS:
    case SIN:
    case TAN:
    case DIAG:
    case EXP:
    case ABS:
    case MIN:
    case MAX:
    case PMIN:
    case PMAX:
    case PPRED:
    case LOG:
    case LENGTH:
    case NCOL:
    case NROW:
    case SQRT:
    case SUM:
    case MEAN:
    case TRANS:
    case APPEND:
    case RANGE:
    case PROD:
    case ROWSUM:
    case COLSUM:
    case ROWMIN:
    case COLMIN:
    case ROWMAX:
    case ROWINDEXMAX:
    case COLMAX:
    case ROWMEAN:
    case COLMEAN:
    case TRACE:
    case CAST_AS_SCALAR:
    case QUANTILE:
    case INTERQUANTILE:
    case IQM:
    case CTABLE:
    case SPEARMAN:
    case ROUND:
    case CENTRALMOMENT:
    case COVARIANCE:
    case CDF:
    case GROUPEDAGG:
    case PLUS:
    case MINUS:
    case NOT:
    case LEFTPAREN:
    case ID:
    case DOLLAR_ID:
    case INTEGER:
    case DOUBLE:
    case DBLQUOTE_STRING_LITERAL:
      right = Expression();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  exprsList.add(left);
  exprsList.add(right);
  {if (true) return exprsList;}
    throw new Error("Missing return statement in function");
  }

  final public MultiAssignmentStatement MultiAssignmentStatement() throws ParseException {
  Expression source;
  ArrayList<ArrayList<Expression>> targetListList = null;
    targetListList = ReadIndexList();
    jj_consume_token(ASSIGN);
    source = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
   {if (true) return new MultiAssignmentStatement(targetListList, source, 0);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentStatement AssignmentStatement() throws ParseException {
  Expression source;
  DataIdentifier target;
    target = Identifier();
  if (target.getName().startsWith("$"))
   {if (true) throw new ParseException("cannot assign variable on left-hand side of assignment statement from command-line");}
    jj_consume_token(ASSIGN);
    source = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
   {if (true) return new AssignmentStatement(target, source);}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
 IfStatement is = new IfStatement();
 Statement current = null;
 ConditionalPredicate cp = null;
    jj_consume_token(IF);
    cp = ConditionalPredicate();
                                    is.setConditionalPredicate(cp);
    jj_consume_token(LEFTCURLYPAREN);
    label_9:
    while (true) {
      if (jj_2_16(3)) {
        current = AssignmentStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTSQUARE:
          current = MultiAssignmentStatement();
          break;
        default:
          jj_la1[33] = jj_gen;
          if (jj_2_17(3)) {
            current = InputStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WRITEMATRIX:
              current = OutputStatement();
              break;
            case PRINT:
              current = PrintStatement();
              break;
            default:
              jj_la1[34] = jj_gen;
              if (jj_2_18(2)) {
                current = WhileStatement();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case FOR:
                  current = ForStatement();
                  break;
                case IF:
                  current = IfStatement();
                  break;
                default:
                  jj_la1[35] = jj_gen;
                  if (jj_2_19(2147483647)) {
                    current = RandStatement();
                  } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      }
    StatementBlock sb = null;
    if (current instanceof WhileStatement) {
     sb = new WhileStatementBlock();
    }
    else if (current instanceof IfStatement) {
     sb = new IfStatementBlock();
    }
   // TODO: MATTHIAS UNCOMMENT
   // else if (current instanceof ParForStatement) {
   //  sb = new ParForStatementBlock();
   // }
    else if (current instanceof ForStatement) {
     sb = new ForStatementBlock();
    }
    //else if (current instanceof CVStatement) {
    // sb = new CVStatementBlock() ;
    //}
    //else if (current instanceof ELStatement) {
    // sb = new ELStatementBlock() ;
    //}
    //else if (current instanceof ELUseStatement) {
    // sb = new ELUseStatementBlock() ;
    //} 
    else {
     sb = new StatementBlock();
    }
    sb.addStatement(current);
    is.addStatementBlockIfBody(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case WRITEMATRIX:
      case PRINT:
      case LEFTSQUARE:
      case ID:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_9;
      }
    }
    jj_consume_token(RIGHTCURLYPAREN);
  is.mergeStatementBlocksIfBody();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(LEFTCURLYPAREN);
      label_10:
      while (true) {
        if (jj_2_20(3)) {
          current = AssignmentStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFTSQUARE:
            current = MultiAssignmentStatement();
            break;
          default:
            jj_la1[37] = jj_gen;
            if (jj_2_21(3)) {
              current = InputStatement();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case WRITEMATRIX:
                current = OutputStatement();
                break;
              case PRINT:
                current = PrintStatement();
                break;
              default:
                jj_la1[38] = jj_gen;
                if (jj_2_22(2)) {
                  current = WhileStatement();
                } else {
                  switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                  case FOR:
                    current = ForStatement();
                    break;
                  case IF:
                    current = IfStatement();
                    break;
                  default:
                    jj_la1[39] = jj_gen;
                    if (jj_2_23(2147483647)) {
                      current = RandStatement();
                    } else {
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                }
              }
            }
          }
        }
    StatementBlock sb = null;
    if (current instanceof WhileStatement) {
     sb = new WhileStatementBlock();
    }
    else if (current instanceof IfStatement) {
     sb = new IfStatementBlock();
    }
    // TODO: MATTHIAS UNCOMMENT
    //else if (current instanceof ParForStatement) {
    // sb = new ParForStatementBlock();
    //}
    else if (current instanceof ForStatement) {
     sb = new ForStatementBlock();
    }
    //else if (current instanceof CVStatement) {
    // sb = new CVStatementBlock() ;
    //}
    //else if (current instanceof ELStatement) {
    // sb = new ELStatementBlock() ;
    //}
    //else if (current instanceof ELUseStatement) {
    // sb = new ELUseStatementBlock() ;
    //}
    else {
     sb = new StatementBlock();
    }
    sb.addStatement(current);
    is.addStatementBlockElseBody(sb);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case FOR:
        case WRITEMATRIX:
        case PRINT:
        case LEFTSQUARE:
        case ID:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(RIGHTCURLYPAREN);
    is.mergeStatementBlocksElseBody();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
  {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

  final public ForStatement ForStatement() throws ParseException {
 ForStatement fs = new ForStatement();
 Statement current = null;
 IterablePredicate ip = null;
    jj_consume_token(FOR);
    ip = IterablePredicate();
                                  fs.setPredicate(ip);
    jj_consume_token(LEFTCURLYPAREN);
    label_11:
    while (true) {
      if (jj_2_24(3)) {
        current = AssignmentStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTSQUARE:
          current = MultiAssignmentStatement();
          break;
        default:
          jj_la1[42] = jj_gen;
          if (jj_2_25(3)) {
            current = InputStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case WRITEMATRIX:
              current = OutputStatement();
              break;
            case PRINT:
              current = PrintStatement();
              break;
            default:
              jj_la1[43] = jj_gen;
              if (jj_2_26(2)) {
                current = WhileStatement();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case FOR:
                  current = ForStatement();
                  break;
                case IF:
                  current = IfStatement();
                  break;
                default:
                  jj_la1[44] = jj_gen;
                  if (jj_2_27(2147483647)) {
                    current = RandStatement();
                  } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      }
  StatementBlock sb = null;
  if (current instanceof WhileStatement) {
   sb = new WhileStatementBlock();
  }
  else if (current instanceof IfStatement) {
   sb = new WhileStatementBlock();
  }
  // TODO: MATTHIAS UNCOMMENT
  //else if (current instanceof ParForStatement) {
  // sb = new ParForStatementBlock();
  //} 
  else if (current instanceof ForStatement) {
   sb = new ForStatementBlock();
  }
  //else if (current instanceof CVStatement) {
  // sb = new CVStatementBlock() ;
  //}
  //else if (current instanceof ELStatement) {
  // sb = new ELStatementBlock() ;
  //}
  //else if (current instanceof ELUseStatement) {
  // sb = new ELUseStatementBlock() ;
  //}
  else {
   sb = new StatementBlock();
  }
  sb.addStatement(current);
  fs.addStatementBlock(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case WRITEMATRIX:
      case PRINT:
      case LEFTSQUARE:
      case ID:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(RIGHTCURLYPAREN);
  fs.mergeStatementBlocks();
  {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

/***** TODO: MATTHIAS UNCOMMENT ****
ParForStatement ParForStatement() :
{
 ParForStatement fs = new ParForStatement();
 Statement current = null;
 IterablePredicate ip = null;
}
{
 
  <PARFOR> ip = IterablePredicate() {fs.setPredicate(ip);}
  <LEFTCURLYPAREN>
  ( ( LOOKAHEAD(3) current = AssignmentStatement()
  |  current = MultiAssignmentStatement()  
  | LOOKAHEAD(3) current = InputStatement() 
  |  current = OutputStatement()
  |  current = PrintStatement()
  |  LOOKAHEAD(2) current = WhileStatement()
  |  current = ForStatement()
  |  current = ParForStatement()
  |  current = IfStatement()
  | LOOKAHEAD(RandStatement()) current = RandStatement()
 // |  current = CVStatement()
 // |  current = ELStatement()
 // |  current = ELUseStatement()
 
 ){
  StatementBlock sb = null;
  if (current instanceof WhileStatement) {
   sb = new WhileStatementBlock();
  }
  else if (current instanceof IfStatement) {
   sb = new WhileStatementBlock();
  }
  else if (current instanceof ParForStatement) {
   sb = new ParForStatementBlock();
  }
  else if (current instanceof ForStatement) {
   sb = new ForStatementBlock();
  }
  
  //else if (current instanceof CVStatement) {
  // sb = new CVStatementBlock() ;
  //}
  //else if (current instanceof ELStatement) {
  // sb = new ELStatementBlock() ;
  //}
  //else if (current instanceof ELUseStatement) {
  // sb = new ELUseStatementBlock() ;
  //}
  else {
   sb = new StatementBlock();
  }
  sb.addStatement(current);
  fs.addStatementBlock(sb);
 }
 )+
   
  <RIGHTCURLYPAREN>
   
 {
  fs.mergeStatementBlocks();
  return fs;
 }
}

*****/
  final public WhileStatement WhileStatement() throws ParseException {
 WhileStatement ws = new WhileStatement();
 Statement current = null;
 ConditionalPredicate cp = null;
    jj_consume_token(WHILE);
    cp = ConditionalPredicate();
                                       ws.setPredicate(cp);
    jj_consume_token(LEFTCURLYPAREN);
    label_12:
    while (true) {
      if (jj_2_28(3)) {
        current = AssignmentStatement();
      } else if (jj_2_29(3)) {
        current = MultiAssignmentStatement();
      } else if (jj_2_30(3)) {
        current = InputStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WRITEMATRIX:
          current = OutputStatement();
          break;
        case PRINT:
          current = PrintStatement();
          break;
        default:
          jj_la1[46] = jj_gen;
          if (jj_2_31(2)) {
            current = WhileStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case FOR:
              current = ForStatement();
              break;
            case IF:
              current = IfStatement();
              break;
            default:
              jj_la1[47] = jj_gen;
              if (jj_2_32(2147483647)) {
                current = RandStatement();
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
  StatementBlock sb = null;
  if (current instanceof WhileStatement) {
   sb = new WhileStatementBlock();
  }
  else if (current instanceof IfStatement) {
   sb = new IfStatementBlock();
  }
  // TODO: MATTHIAS UNCOMMENT
  //else if (current instanceof ParForStatement) {
  // sb = new ParForStatementBlock();
  //}
  else if (current instanceof ForStatement) {
   sb = new ForStatementBlock();
  }
  //else if (current instanceof CVStatement) {
  // sb = new CVStatementBlock() ;
  //}
  //else if (current instanceof ELStatement) {
  // sb = new ELStatementBlock() ;
  //}
  //else if (current instanceof ELUseStatement) {
  // sb = new ELUseStatementBlock() ;
  //}
  else {
   sb = new StatementBlock();
  }
  sb.addStatement(current);
  ws.addStatementBlock(sb);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case WRITEMATRIX:
      case PRINT:
      case LEFTSQUARE:
      case ID:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_12;
      }
    }
    jj_consume_token(RIGHTCURLYPAREN);
  ws.mergeStatementBlocks();
  {if (true) return ws;}
    throw new Error("Missing return statement in function");
  }

  final public IterablePredicate IterablePredicate() throws ParseException {
 DataIdentifier iterVar = null;
 Expression fromExpr = null, toExpr = null, incrementExpr = null;
 FunctionCallIdentifier fci = null;
 Token paramName = null, paramVal = null;
 HashMap<String,String> parforParamValues = new HashMap<String,String>();
 ArrayList<Expression> exprParams = new ArrayList<Expression>();
    jj_consume_token(LEFTPAREN);
    iterVar = Identifier();
    jj_consume_token(IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case COS:
    case SIN:
    case TAN:
    case DIAG:
    case EXP:
    case ABS:
    case MIN:
    case MAX:
    case PMIN:
    case PMAX:
    case PPRED:
    case LOG:
    case LENGTH:
    case NCOL:
    case NROW:
    case SQRT:
    case SUM:
    case MEAN:
    case TRANS:
    case APPEND:
    case RANGE:
    case PROD:
    case ROWSUM:
    case COLSUM:
    case ROWMIN:
    case COLMIN:
    case ROWMAX:
    case ROWINDEXMAX:
    case COLMAX:
    case ROWMEAN:
    case COLMEAN:
    case TRACE:
    case CAST_AS_SCALAR:
    case QUANTILE:
    case INTERQUANTILE:
    case IQM:
    case CTABLE:
    case SPEARMAN:
    case ROUND:
    case CENTRALMOMENT:
    case COVARIANCE:
    case CDF:
    case GROUPEDAGG:
    case PLUS:
    case MINUS:
    case NOT:
    case COLON:
    case LEFTPAREN:
    case ID:
    case DOLLAR_ID:
    case INTEGER:
    case DOUBLE:
    case DBLQUOTE_STRING_LITERAL:
      exprParams = ColonDelimitedExpression();
      break;
    case SEQ:
      jj_consume_token(SEQ);
      fci = FunctionCall();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      paramName = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        paramVal = jj_consume_token(INTEGER);
        break;
      case ID:
        paramVal = jj_consume_token(ID);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                 parforParamValues.put(paramName.image, paramVal.image);
    }
   if (fci == null && exprParams == null)
   {
    {if (true) throw new ParseException("iterable predicate in for loop must specify parameters");}
   }

   // 
   if (fci != null)
   {
    ArrayList<Expression> seqExprs = fci.getParamExpressions();
    if (seqExprs.size() <  2 || seqExprs.size() > 3)
    {
     {if (true) throw new ParseException("for seq, must specify both from and to value and cannot specify more than 3 args to seq");}
    }
    else
    {
     fromExpr = seqExprs.get(0);
     toExpr   = seqExprs.get(1);
     incrementExpr = (seqExprs.size() == 3) ? seqExprs.get(2) : new IntIdentifier(1);
    }

   }
   else {
    // use exprParams
    fromExpr = exprParams.get(0);
    toExpr   = exprParams.get(1);
    incrementExpr = new IntIdentifier(1);
   }

  // if (params.size() > 2)

    jj_consume_token(RIGHTPAREN);
  {if (true) return new IterablePredicate(iterVar, fromExpr, toExpr, incrementExpr, parforParamValues);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalPredicate ConditionalPredicate() throws ParseException {
 Expression expr;
    jj_consume_token(LEFTPAREN);
    //IdentifierOrConstant() RelationalOp() IdentifierOrConstant() 
     expr = BooleanOrExpression();
    jj_consume_token(RIGHTPAREN);
  {if (true) return new ConditionalPredicate(expr);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
  Expression expr = null;
    expr = BooleanOrExpression();
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BooleanOrExpression() throws ParseException {
  Expression expr = null;
    expr = BooleanAndExpression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONALOR:
      case LOGICALOR:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_14;
      }
      Expression left, right; Expression.BooleanOp bop = null; Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONALOR:
        t = jj_consume_token(CONDITIONALOR);
        break;
      case LOGICALOR:
        t = jj_consume_token(LOGICALOR);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      bop = Expression.getBooleanOp(t.image);
      right = BooleanAndExpression();
        left = expr;
       BooleanExpression exprb = new BooleanExpression(bop);
       exprb.setLeft(left);
       exprb.setRight(right);
       expr = exprb;
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BooleanAndExpression() throws ParseException {
  Expression expr = null;
    expr = BooleanNotExpression();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONALAND:
      case LOGICALAND:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_15;
      }
      Expression left, right; Expression.BooleanOp bop = null; Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONDITIONALAND:
        t = jj_consume_token(CONDITIONALAND);
        break;
      case LOGICALAND:
        t = jj_consume_token(LOGICALAND);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      bop = Expression.getBooleanOp(t.image);
      right = BooleanNotExpression();
        left = expr;
       BooleanExpression exprb = new BooleanExpression(bop);
       exprb.setLeft(left);
       exprb.setRight(right);
       expr = exprb;
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BooleanNotExpression() throws ParseException {
  Expression expr = null; Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t = jj_consume_token(NOT);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    expr = RelationalExpression();
      if (t == null)
     {if (true) return expr;}

      Expression.BooleanOp bop = Expression.getBooleanOp(t.image);
   Expression left = expr;
   BooleanExpression notexpr = new BooleanExpression(bop);
   notexpr.setLeft(left);
   {if (true) return notexpr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {
  Expression expr = null;
    expr = PlusMinusExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSEQUAL:
      case LESS:
      case GREATEREQUAL:
      case GREATER:
      case EQUAL:
      case NOTEQUAL:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_16;
      }
     Expression left, right; Expression.RelationalOp bop = null; Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSEQUAL:
        t = jj_consume_token(LESSEQUAL);
        break;
      case LESS:
        t = jj_consume_token(LESS);
        break;
      case GREATEREQUAL:
        t = jj_consume_token(GREATEREQUAL);
        break;
      case GREATER:
        t = jj_consume_token(GREATER);
        break;
      case EQUAL:
        t = jj_consume_token(EQUAL);
        break;
      case NOTEQUAL:
        t = jj_consume_token(NOTEQUAL);
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    bop = Expression.getRelationalOp(t.image);
      right = PlusMinusExpression();
        left = expr;
       RelationalExpression exprb = new RelationalExpression(bop);
       exprb.setLeft(left);
       exprb.setRight(right);
       expr = exprb;
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PlusMinusExpression() throws ParseException {
  Expression expr;
    expr = MultDivExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_17;
      }
    Expression left, right; Expression.BinaryOp bop = null; Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                 bop = Expression.getBinaryOp(t.image);
      right = MultDivExpression();
     left = expr;
    BinaryExpression exprb = new BinaryExpression(bop);
    exprb.setLeft(left);
    exprb.setRight(right);
    expr = exprb;
    }
  {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultDivExpression() throws ParseException {
  Expression expr;
    expr = MatrixMultExpression();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_18;
      }
    Expression left, right; Expression.BinaryOp bop = null; Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        t = jj_consume_token(MULT);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                              bop = Expression.getBinaryOp(t.image);
      right = MatrixMultExpression();
    left = expr;
    BinaryExpression exprb = new BinaryExpression(bop);
    exprb.setLeft(left);
    exprb.setRight(right);
    expr = exprb;
    }
  {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MatrixMultExpression() throws ParseException {
  Expression expr;
    expr = UnaryExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MATRIXMULT:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_19;
      }
  Expression left, right; Expression.BinaryOp bop = null; Token t;
      t = jj_consume_token(MATRIXMULT);
                     bop = Expression.getBinaryOp(t.image);
      right = UnaryExpression();
    left = expr;
    BinaryExpression exprb = new BinaryExpression(bop);
    exprb.setLeft(left);
    exprb.setRight(right);
    expr = exprb;
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpression() throws ParseException {
  Expression expr = null;
    if (jj_2_33(3)) {
      expr = PowerExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
    Token t; Expression right = null; BinaryOp bop = null;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[64] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                 bop = Expression.getBinaryOp(t.image);
        right = PowerExpression();
      BinaryExpression exprb = new BinaryExpression(bop);
     IntIdentifier id = new IntIdentifier(0);
  id.setDimensions(0,0);
  id.computeDataType();
  id.setValueType(ValueType.INT);
    exprb.setLeft(id);
    exprb.setRight(right);
    expr = exprb;
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PowerExpression() throws ParseException {
  Expression expr = null;
    expr = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POWER:
    Expression left, right; Expression.BinaryOp bop = null; Token t;
      t = jj_consume_token(POWER);
                  bop = Expression.getBinaryOp(t.image);
      right = PowerExpression();
     left = expr;
    BinaryExpression exprb = new BinaryExpression(bop);
    exprb.setLeft(left);
    exprb.setRight(right);
    expr = exprb;
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {
  Expression expr = null;
    if (jj_2_34(2)) {
      expr = IdentifierOrConstant();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPAREN:
        jj_consume_token(LEFTPAREN);
        expr = Expression();
        jj_consume_token(RIGHTPAREN);
        break;
      default:
        jj_la1[67] = jj_gen;
        if (jj_2_35(2)) {
          expr = BuiltInFunction();
        } else if (jj_2_36(2)) {
          expr = ParameterizedBuiltInFunction();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
   {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Identifier IdentifierOrConstant() throws ParseException {
        Identifier id = null;
        Token t1 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR_ID:
      t1 = jj_consume_token(DOLLAR_ID);
                                ///////// BEGIN handle variable param ///////////////
                                {
                                  String argVal = commandArgs.get(t1.image);

                                        if (argVal == null)
                                                System.out.println("ERROR: value for " + t1.image + " is undefined ");

                                        try {
                                                // try to assign to long value
                                                Long longVal = new Long(argVal);
                                                id = new IntIdentifier(longVal);
                                                id.setDimensions(0,0);
                                        id.computeDataType();
                                        id.setValueType(ValueType.INT);

                                        } catch(Exception e1){
                                                        try {
                                                                // try to assign to double value
                                                                Double doubleVal = new Double(argVal);
                                                                id = new DoubleIdentifier(doubleVal);
                                                                id.setDimensions(0,0);
                                                        id.computeDataType();
                                                        id.setValueType(ValueType.DOUBLE);

                                                        } catch (Exception e2) {

                                                                // try to assign to boolean value
                                                                if (argVal.equalsIgnoreCase("true") || argVal.equalsIgnoreCase("false")){
                                                                        Boolean boolVal = new Boolean(argVal);
                                                                        id = new BooleanIdentifier(boolVal);
                                                                        id.setDimensions(0,0);
                                                                id.computeDataType();
                                                                id.setValueType(ValueType.BOOLEAN);
                                                                }
                                                                else {
                                                                        // try to assign to string value
                                                                        id = new StringIdentifier(dequoteStr('\u005c"',argVal));
                                                                        id.setDimensions(0,0);
                                                                id.computeDataType();
                                                                id.setValueType(ValueType.STRING);
                                                                }

                                                        } // end catch e2

                                                } // end catch e1
                                        }  // end if	

      break;
    case ID:
      id = Identifier();
      break;
    case TRUE:
    case FALSE:
    case MINUS:
    case INTEGER:
    case DOUBLE:
    case DBLQUOTE_STRING_LITERAL:
      id = Constant();
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public ConstIdentifier Constant() throws ParseException {
 Token t;
 Boolean minus = false;
 ConstIdentifier id = null;
    if (jj_2_37(2)) {
      id = IntConstant();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case DOUBLE:
        id = DoubleConstant();
        break;
      case TRUE:
      case FALSE:
        id = BooleanConstant();
        break;
      case DBLQUOTE_STRING_LITERAL:
        id = StringConstant();
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public IntIdentifier IntConstant() throws ParseException {
 Token t;
 Boolean minus = false;
 IntIdentifier id = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
         minus = true;
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    t = jj_consume_token(INTEGER);
     long intval = Long.parseLong(t.image);
     if (minus)
     {
     intval = -intval;
     }
   id = new IntIdentifier(intval);
   id.setDimensions(0,0);
      id.computeDataType();
      id.setValueType(ValueType.INT);
 {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public DoubleIdentifier DoubleConstant() throws ParseException {
 Token t;
 Boolean minus = false;
 DoubleIdentifier id = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
         minus = true;
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    t = jj_consume_token(DOUBLE);
      Double doubleval = Double.parseDouble(t.image);
      if (minus)
      {
        doubleval = -doubleval;
      }
   id = new DoubleIdentifier(doubleval);
   id.setDimensions(0,0);
      id.computeDataType();
      id.setValueType(ValueType.DOUBLE);
 {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public BooleanIdentifier BooleanConstant() throws ParseException {
 Token t;
  BooleanIdentifier id = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   id = new BooleanIdentifier(Boolean.parseBoolean(t.image));
   id.setDimensions(0,0);
      id.computeDataType();
      id.setValueType(ValueType.BOOLEAN);
 {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public StringIdentifier StringConstant() throws ParseException {
 Token t;
  StringIdentifier id = null;
    t = jj_consume_token(DBLQUOTE_STRING_LITERAL);
   id = new StringIdentifier(dequoteStr('\u005c"',t.image));
   id.setDimensions(0,0);
      id.computeDataType();
      id.setValueType(ValueType.STRING);
 {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public DataIdentifier Identifier() throws ParseException {
 Token t = null;
 Token tNamespace = null;
 DataIdentifier id = null;
 FunctionCallIdentifier functCall = null;
 ArrayList<ArrayList<Expression>> exprListList = null;
    if (jj_2_38(4)) {
      tNamespace = jj_consume_token(ID);
      jj_consume_token(COLON);
      jj_consume_token(COLON);
    } else {
      ;
    }
    t = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFTPAREN:
    case LEFTSQUARE:
      if (jj_2_39(2147483647)) {
        functCall = FunctionCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTSQUARE:
          exprListList = ReadIndexList();
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    id = new DataIdentifier(t.image, t.beginLine, t.beginColumn);

  if (functCall != null) {
      String namespaceName = (tNamespace == null) ? null : tNamespace.image;
     functCall.setFunctionNamespace(namespaceName);
    functCall.setFunctionName(t.image);
   {if (true) return functCall;}
  } else if (exprListList != null){
   id.setIndices(exprListList);
   {if (true) return id;}
  } else{
   {if (true) return id;}
  }
    throw new Error("Missing return statement in function");
  }

  final public FunctionCallIdentifier FunctionCall() throws ParseException {
    Expression expr = null;
 FunctionCallIdentifier functCall = null;
 ArrayList<Expression> exprs = new ArrayList<Expression>();
    jj_consume_token(LEFTPAREN);
    expr = Expression();
                                       exprs.add(expr);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      expr = Expression();
                                                                                              exprs.add(expr);
    }
    jj_consume_token(RIGHTPAREN);
  functCall = new FunctionCallIdentifier(exprs);
  {if (true) return functCall;}
    throw new Error("Missing return statement in function");
  }

// parsing rule for parameterized builtins  
  final public Expression ParameterizedBuiltInFunction() throws ParseException {
 Expression.ParameterizedBuiltinFunctionOp bifop = null;
 ParameterizedBuiltinFunctionExpression pbfe = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CDF:
      jj_consume_token(CDF);
            bifop = Expression.ParameterizedBuiltinFunctionOp.CDF;
      break;
    case GROUPEDAGG:
      jj_consume_token(GROUPEDAGG);
                    bifop = Expression.ParameterizedBuiltinFunctionOp.GROUPEDAGG;
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    pbfe = readParameterizedBuiltInParameters();
    if (jj_2_40(2)) {
      jj_consume_token(SEMICOLON);
    } else {
      ;
    }
   pbfe.setOpcode (bifop);
   {if (true) return pbfe;}
    throw new Error("Missing return statement in function");
  }

// Process the comma separated parameter list of parameterized builtins
// Allowed format: function( expression [, name=vexpr]* )
//   WHERE vexpr is an expression that refers to the "value" for the parameter "name"
  final public ParameterizedBuiltinFunctionExpression readParameterizedBuiltInParameters() throws ParseException {
 ParameterizedBuiltinFunctionExpression pbfe = new ParameterizedBuiltinFunctionExpression();
 Token t1 = null;
 Expression t2 = null;
 String unnamed = "unnamed";
 int unnamedParamCount = 0;
 IntIdentifier intid = null;
 DoubleIdentifier doubleid = null;
    jj_consume_token(LEFTPAREN);
    t1 = jj_consume_token(ID);
    jj_consume_token(ASSIGN);
    t2 = Expression();
                                           pbfe.addVarParam(t1.image, t2);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_21;
      }
      jj_consume_token(COMMA);
      t1 = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      t2 = Expression();
                                                       pbfe.addVarParam(t1.image, t2);
    }
    jj_consume_token(RIGHTPAREN);
  {if (true) return pbfe;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BuiltInFunction() throws ParseException {
    Expression expr = null;
 ArrayList<Expression> exprs = new ArrayList<Expression>();
 Expression.BuiltinFunctionOp bifop = null;
 Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COS:
      jj_consume_token(COS);
           bifop = Expression.BuiltinFunctionOp.COS;
      break;
    case SIN:
      jj_consume_token(SIN);
           bifop = Expression.BuiltinFunctionOp.SIN;
      break;
    case TAN:
      jj_consume_token(TAN);
           bifop = Expression.BuiltinFunctionOp.TAN;
      break;
    case DIAG:
      jj_consume_token(DIAG);
            bifop = Expression.BuiltinFunctionOp.DIAG;
      break;
    case EXP:
      jj_consume_token(EXP);
           bifop = Expression.BuiltinFunctionOp.EXP;
      break;
    case ABS:
      jj_consume_token(ABS);
           bifop = Expression.BuiltinFunctionOp.ABS;
      break;
    case MIN:
      jj_consume_token(MIN);
           bifop = Expression.BuiltinFunctionOp.MIN;
      break;
    case MAX:
      jj_consume_token(MAX);
           bifop = Expression.BuiltinFunctionOp.MAX;
      break;
    case PMIN:
      jj_consume_token(PMIN);
            bifop = Expression.BuiltinFunctionOp.PMIN;
      break;
    case PMAX:
      jj_consume_token(PMAX);
            bifop = Expression.BuiltinFunctionOp.PMAX;
      break;
    case PPRED:
      jj_consume_token(PPRED);
             bifop = Expression.BuiltinFunctionOp.PPRED;
      break;
    case LOG:
      jj_consume_token(LOG);
           bifop = Expression.BuiltinFunctionOp.LOG;
      break;
    case LENGTH:
      jj_consume_token(LENGTH);
              bifop = Expression.BuiltinFunctionOp.LENGTH;
      break;
    case NCOL:
      jj_consume_token(NCOL);
            bifop = Expression.BuiltinFunctionOp.NCOL;
      break;
    case NROW:
      jj_consume_token(NROW);
            bifop = Expression.BuiltinFunctionOp.NROW;
      break;
    case SQRT:
      jj_consume_token(SQRT);
            bifop = Expression.BuiltinFunctionOp.SQRT;
      break;
    case SUM:
      jj_consume_token(SUM);
           bifop = Expression.BuiltinFunctionOp.SUM;
      break;
    case MEAN:
      jj_consume_token(MEAN);
            bifop = Expression.BuiltinFunctionOp.MEAN;
      break;
    case TRACE:
      jj_consume_token(TRACE);
             bifop = Expression.BuiltinFunctionOp.TRACE;
      break;
    case TRANS:
      jj_consume_token(TRANS);
             bifop = Expression.BuiltinFunctionOp.TRANS;
      break;
    case APPEND:
      jj_consume_token(APPEND);
              bifop = Expression.BuiltinFunctionOp.APPEND;
      break;
    case RANGE:
      jj_consume_token(RANGE);
             bifop = Expression.BuiltinFunctionOp.RANGE;
      break;
    case PROD:
      jj_consume_token(PROD);
            bifop = Expression.BuiltinFunctionOp.PROD;
      break;
    case ROWSUM:
      jj_consume_token(ROWSUM);
              bifop = Expression.BuiltinFunctionOp.ROWSUM;
      break;
    case COLSUM:
      jj_consume_token(COLSUM);
              bifop = Expression.BuiltinFunctionOp.COLSUM;
      break;
    case ROWMIN:
      jj_consume_token(ROWMIN);
              bifop = Expression.BuiltinFunctionOp.ROWMIN;
      break;
    case COLMIN:
      jj_consume_token(COLMIN);
              bifop = Expression.BuiltinFunctionOp.COLMIN;
      break;
    case ROWMAX:
      jj_consume_token(ROWMAX);
              bifop = Expression.BuiltinFunctionOp.ROWMAX;
      break;
    case ROWINDEXMAX:
      jj_consume_token(ROWINDEXMAX);
                   bifop = Expression.BuiltinFunctionOp.ROWINDEXMAX;
      break;
    case COLMAX:
      jj_consume_token(COLMAX);
              bifop = Expression.BuiltinFunctionOp.COLMAX;
      break;
    case ROWMEAN:
      jj_consume_token(ROWMEAN);
               bifop = Expression.BuiltinFunctionOp.ROWMEAN;
      break;
    case COLMEAN:
      jj_consume_token(COLMEAN);
               bifop = Expression.BuiltinFunctionOp.COLMEAN;
      break;
    case CAST_AS_SCALAR:
      jj_consume_token(CAST_AS_SCALAR);
                      bifop = Expression.BuiltinFunctionOp.CAST_AS_SCALAR;
      break;
    case QUANTILE:
      jj_consume_token(QUANTILE);
               bifop= Expression.BuiltinFunctionOp.QUANTILE;
      break;
    case INTERQUANTILE:
      jj_consume_token(INTERQUANTILE);
                    bifop= Expression.BuiltinFunctionOp.INTERQUANTILE;
      break;
    case IQM:
      jj_consume_token(IQM);
          bifop= Expression.BuiltinFunctionOp.IQM;
      break;
    case CTABLE:
      jj_consume_token(CTABLE);
              bifop = Expression.BuiltinFunctionOp.CTABLE;
      break;
    case SPEARMAN:
      jj_consume_token(SPEARMAN);
                bifop = Expression.BuiltinFunctionOp.SPEARMAN;
      break;
    case ROUND:
      jj_consume_token(ROUND);
             bifop = Expression.BuiltinFunctionOp.ROUND;
      break;
    case CENTRALMOMENT:
      jj_consume_token(CENTRALMOMENT);
                     bifop = Expression.BuiltinFunctionOp.CENTRALMOMENT;
      break;
    case COVARIANCE:
      jj_consume_token(COVARIANCE);
                  bifop = Expression.BuiltinFunctionOp.COVARIANCE;
      break;
    default:
      jj_la1[78] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LEFTPAREN);
    expr = Expression();
                                     exprs.add(expr);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      expr = Expression();
                                                                                            exprs.add(expr);
    }
    jj_consume_token(RIGHTPAREN);
   Expression expr1 = exprs.size() >= 1 ? expr1 = exprs.get(0) : null;
   Expression expr2 = exprs.size() >= 2 ? expr2 = exprs.get(1) : null;
   Expression expr3 = exprs.size() >= 3 ? expr3 = exprs.get(2) : null;
   {if (true) return new BuiltinFunctionExpression(bifop,expr1, expr2, expr3);}
    throw new Error("Missing return statement in function");
  }

  final public InputStatement InputStatement() throws ParseException {
  DataIdentifier id = null;
  InputStatement is = null;
    id = Identifier();
  if (id.getName().startsWith("$"))
    {if (true) throw new ParseException("command-line parameters (e.g. $1) do not support assignment");}
    jj_consume_token(ASSIGN);
    jj_consume_token(READMATRIX);
    is = ReadInputStatementParamList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
  is.setIdentifier(id);
  id.setDimensions(is);
  id.computeDataType();
  {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

  final public InputStatement ReadInputStatementParamList() throws ParseException {
        InputStatement is = new InputStatement();
        Token t1 = null;
        Token t2 = null;
        DataIdentifier t3 = null;
        Token t4 = null;
        IntIdentifier intid = null;
        DoubleIdentifier doubleid = null;
    jj_consume_token(LEFTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DBLQUOTE_STRING_LITERAL:
      t1 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                            is.setFileName(dequoteStr('\u005c"',t1.image));
      break;
    case ID:
      t2 = jj_consume_token(ID);
      break;
    case DOLLAR_ID:
      t4 = jj_consume_token(DOLLAR_ID);
                        String argVal = commandArgs.get(t4.image);
                        if (argVal == null)
                                System.out.println("ERROR: value for " + t4.image + " is undefined ");
                        is.setFileName(dequoteStr('\u005c"',argVal));
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      t1 = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      if (jj_2_41(2)) {
        intid = IntConstant();
                                                               is.addStringParam(t1.image, intid.toString());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case DOUBLE:
          doubleid = DoubleConstant();
                                                                is.addStringParam(t1.image, doubleid.toString());
          break;
        case DBLQUOTE_STRING_LITERAL:
          t2 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                                                   is.addStringParam(t1.image, dequoteStr('\u005c"', t2.image));
          break;
        case ID:
          t3 = Identifier();
                                                      is.addVarParam(t1.image, t3.getName());
          break;
        case DOLLAR_ID:
          t4 = jj_consume_token(DOLLAR_ID);
                                                String argVal = commandArgs.get(t4.image);
                                                if (argVal == null)
                                                        System.out.println("ERROR: value for " + t4.image + " is undefined ");

                                                try {
                                                        Long longVal = new Long(argVal);
                                                        is.addStringParam(t1.image, longVal.toString());

                                                } catch(Exception e1){
                                                        try {
                                                          Double doubleVal = new Double(argVal);
                                                          is.addStringParam(t1.image, doubleVal.toString());

                                                        } catch (Exception e2) {

                                                                if (argVal.equalsIgnoreCase("true") || argVal.equalsIgnoreCase("false")){
                                                                        Boolean boolVal = new Boolean(argVal);
                                                                        is.addStringParam(t1.image, argVal.toString());
                                                                }
                                                                else {
                                                                        is.addStringParam(t1.image, dequoteStr('\u005c"', argVal));
                                                                }

                                                        } // end catch e2

                                                } // end catch e1

          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RIGHTPAREN);
           {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

  final public OutputStatement OutputStatement() throws ParseException {
         DataIdentifier fn = null;
         Token t1 = null, t2 = null;
         DataIdentifier t3 = null;
         Token t4 = null;
         OutputStatement os;
         IntIdentifier intid = null;
         DoubleIdentifier doubleid = null;
    jj_consume_token(WRITEMATRIX);
    jj_consume_token(LEFTPAREN);
    // name of variable to be written out 
                 fn = Identifier();
                os = new OutputStatement(fn, null);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DBLQUOTE_STRING_LITERAL:
      t1 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                                         os.setFileName(dequoteStr('\u005c"',t1));
      break;
    case ID:
      t3 = Identifier();
      break;
    case DOLLAR_ID:
      t4 = jj_consume_token(DOLLAR_ID);
                                                String argVal = commandArgs.get(t4.image);
                                                if (argVal == null)
                                                        System.out.println("ERROR: value for " + t4.image + " is undefined ");
                                                os.setFileName(dequoteStr('\u005c"',argVal));
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_24;
      }
      jj_consume_token(COMMA);
      t1 = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      if (jj_2_42(2)) {
        intid = IntConstant();
                                                               os.addStringParam(t1.image, intid.toString());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case DOUBLE:
          doubleid = DoubleConstant();
                                                                os.addStringParam(t1.image, doubleid.toString());
          break;
        case DBLQUOTE_STRING_LITERAL:
          t2 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                                                   os.addStringParam(t1.image, dequoteStr('\u005c"', t2.image));
          break;
        case ID:
          t3 = Identifier();
                                                     os.addVarParam(t1.image, t3.getName());
          break;
        case DOLLAR_ID:
          t4 = jj_consume_token(DOLLAR_ID);
                                                String argVal = commandArgs.get(t4.image);
                                                if (argVal == null)
                                                        System.out.println("ERROR: Variable " + t4.image + " is undefined ");

                                                try {
                                                        Long longVal = new Long(argVal);
                                                        os.addStringParam(t1.image, longVal.toString());

                                                } catch(Exception e1){
                                                        try {
                                                          Double doubleVal = new Double(argVal);
                                                          os.addStringParam(t1.image, doubleVal.toString());

                                                        } catch (Exception e2) {

                                                                if (argVal.equalsIgnoreCase("true") || argVal.equalsIgnoreCase("false")){
                                                                        Boolean boolVal = new Boolean(argVal);
                                                                        os.addStringParam(t1.image, argVal.toString());
                                                                }
                                                                else {
                                                                        os.addStringParam(t1.image, dequoteStr('\u005c"', argVal));
                                                                }

                                                        } // end catch e2

                                                } // end catch e1

          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RIGHTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
         {if (true) return os;}
    throw new Error("Missing return statement in function");
  }

  final public PrintStatement PrintStatement() throws ParseException {
  Expression source;
    jj_consume_token(PRINT);
    jj_consume_token(LEFTPAREN);
    source = Expression();
    jj_consume_token(RIGHTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
   {if (true) return new PrintStatement(source);}
    throw new Error("Missing return statement in function");
  }

  final public void RelationalOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      jj_consume_token(LESS);
      break;
    case GREATER:
      jj_consume_token(GREATER);
      break;
    case GREATEREQUAL:
      jj_consume_token(GREATEREQUAL);
      break;
    case LESSEQUAL:
      jj_consume_token(LESSEQUAL);
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public RandStatement RandStatement() throws ParseException {
        RandStatement rs;
        DataIdentifier id;
        Token t1;
        Token t2;
        IntIdentifier intid = null;
        DoubleIdentifier doubleid = null;
        DataIdentifier t3;
        Token t4 = null;
    id = Identifier();
    jj_consume_token(ASSIGN);
    jj_consume_token(RAND);
    jj_consume_token(LEFTPAREN);
                rs = new RandStatement(id);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MIN:
    case MAX:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t1 = jj_consume_token(ID);
        break;
      case MIN:
        t1 = jj_consume_token(MIN);
        break;
      case MAX:
        t1 = jj_consume_token(MAX);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ASSIGN);
      if (jj_2_43(2)) {
        intid = IntConstant();
                                                               rs.addLongParam(t1.image, intid.getValue());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case DOUBLE:
          doubleid = DoubleConstant();
                                                        rs.addDoubleParam(t1.image, doubleid.getValue());
          break;
        case DBLQUOTE_STRING_LITERAL:
          t2 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                                           rs.addStringParam(t1.image, dequoteStr('\u005c"', t2.image));
          break;
        case ID:
          t3 = Identifier();
                                               rs.addVarParam(t1.image, t3);
          break;
        case DOLLAR_ID:
          t4 = jj_consume_token(DOLLAR_ID);
                                        String argVal = commandArgs.get(t4.image);
                                        if (argVal == null)
                                                System.out.println("ERROR: Value of " + t4.image + " is undefined ");

                                        try {
                                                Long longVal = new Long(argVal);
                                                rs.addLongParam(t1.image, longVal.longValue());

                                        } catch(Exception e1){
                                                try {
                                                  Double doubleVal = new Double(argVal);
                                                  rs.addDoubleParam(t1.image, doubleVal.doubleValue());

                                                } catch (Exception e2) {

                                                        if (argVal.equalsIgnoreCase("true") || argVal.equalsIgnoreCase("false")){
                                                                Boolean boolVal = new Boolean(argVal);
                                                                rs.addStringParam(t1.image, argVal);
                                                        }
                                                        else {
                                                                rs.addStringParam(t1.image, dequoteStr('\u005c"', argVal));
                                                        }
                                                } // end catch e2		  	 
                                        } // end catch e1		

          break;
        default:
          jj_la1[91] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_25;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t1 = jj_consume_token(ID);
          break;
        case MIN:
          t1 = jj_consume_token(MIN);
          break;
        case MAX:
          t1 = jj_consume_token(MAX);
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(ASSIGN);
        if (jj_2_44(2)) {
          intid = IntConstant();
                                                                      rs.addLongParam(t1.image, intid.getValue());
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case DOUBLE:
            doubleid = DoubleConstant();
                                                                rs.addDoubleParam(t1.image, doubleid.getValue());
            break;
          case DBLQUOTE_STRING_LITERAL:
            t2 = jj_consume_token(DBLQUOTE_STRING_LITERAL);
                                                                   rs.addStringParam(t1.image, dequoteStr('\u005c"', t2.image));
            break;
          case ID:
            t3 = Identifier();
                                                     rs.addVarParam(t1.image, t3);
            break;
          case DOLLAR_ID:
            t4 = jj_consume_token(DOLLAR_ID);
                                                String argVal = commandArgs.get(t4.image);
                                                if (argVal == null)
                                                        System.out.println("ERROR: Value of " + t4.image + " is undefined ");

                                                try {
                                                        Long longVal = new Long(argVal);
                                                        rs.addLongParam(t1.image, longVal.longValue());
                                                } catch(Exception e1){
                                                        try {
                                                          Double doubleVal = new Double(argVal);
                                                          rs.addDoubleParam(t1.image, doubleVal.doubleValue());
                                                        } catch (Exception e2) {
                                                                if (argVal.equalsIgnoreCase("true") || argVal.equalsIgnoreCase("false")){
                                                                        Boolean boolVal = new Boolean(argVal);
                                                                        rs.addStringParam(t1.image, argVal);
                                                                }
                                                                else {
                                                                        rs.addStringParam(t1.image, dequoteStr('\u005c"', argVal));
                                                                }
                                                        } // end catch e2	  						  	 
                                                } // end catch e1								

            break;
          default:
            jj_la1[94] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    jj_consume_token(RIGHTPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
                rs.validateFunctionCall();
                rs.setIdentifierProperties();
                {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_3R_120() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(DOLLAR_ID)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(POWER)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(EXTERNALFUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(READMATRIX)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(COVARIANCE)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(CENTRALMOMENT)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(ROUND)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(SPEARMAN)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(CTABLE)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(MATRIXMULT)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(IQM)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(INTERQUANTILE)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(QUANTILE)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(CAST_AS_SCALAR)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(COLMEAN)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(ROWMEAN)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(COLMAX)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(ROWINDEXMAX)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(ROWMAX)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(COLMIN)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(ROWMIN)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(COLSUM)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(ROWSUM)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(PROD)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(RANGE)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(APPEND)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(TRANS)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(TRACE)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(MEAN)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(SQRT)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(NROW)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(NCOL)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(LOG)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(PPRED)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(PMAX)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(PMIN)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(MAX)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(MIN)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(ABS)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(EXP)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(DIAG)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(TAN)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(SIN)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(COS)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_130()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(GROUPEDAGG)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(100)) jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(CDF)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(DOLLAR_ID)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    if (jj_3R_96()) return true;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(DBLQUOTE_STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(LEFTPAREN)) return true;
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHTPAREN)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    if (jj_scan_token(ASSIGN)) return true;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_123()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(DOLLAR_ID)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(DBLQUOTE_STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    if (jj_scan_token(ASSIGN)) return true;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(LEFTPAREN)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(DBLQUOTE_STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(RAND)) return true;
    if (jj_scan_token(LEFTPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(LEFTSQUARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHTSQUARE)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DMLQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[97];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x22800,0x22800,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x2000000,0x22800,0x22800,0x0,0x300000,0x0,0x300000,0x0,0x300000,0x300000,0x0,0x0,0x300000,0x300000,0x0,0x300000,0x0,0x300000,0x300000,0x300000,0x0,0x0,0x0,0x0,0x20800,0x22800,0x0,0x0,0x20800,0x22800,0x1000,0x0,0x0,0x20800,0x22800,0x0,0x20800,0x22800,0xb00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x300000,0x0,0x0,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0xc0,0x0,0xc0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xc,0x12,0x1e,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x12,0x12,0x0,0x80000,0x0,0x80000,0x0,0x40080000,0x40080000,0x0,0x0,0x40080000,0x40080000,0x0,0xfff80,0x0,0xfff80,0xfff80,0xfff80,0x0,0x0,0x0,0x12,0x0,0x12,0x0,0x12,0x0,0x12,0x0,0x0,0x12,0x0,0x12,0x12,0x0,0x12,0xfff80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f000000,0x3f000000,0xc0000,0xc0000,0x300000,0x300000,0x400000,0xc0000,0xc0000,0x800000,0x0,0x80000,0x80000,0x80000,0x80000,0x0,0x0,0x0,0x0,0x30000,0x0,0xff80,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x80000,0x0,0x0,0x3f000000,0x0,0x80000,0x0,0x0,0x80000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x5000,0x20,0x40,0x200,0x4000,0x4000,0x80,0x0,0x20,0x0,0x0,0x5000,0x20,0xe0000,0x200,0xe0000,0x1000,0xe0000,0xe0000,0x200,0x1000,0xe0000,0xe0000,0x200,0x7c090,0x200,0x7c090,0x7c090,0x7c090,0x20,0x20,0x1000,0x0,0x0,0x5000,0x1000,0x0,0x0,0x5000,0x0,0x1000,0x0,0x0,0x5000,0x0,0x0,0x5000,0x7c0d0,0x200,0x14000,0xc,0xc,0x3,0x3,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x7c000,0x60000,0x0,0x0,0x0,0x1000,0x1080,0x200,0x0,0x200,0x0,0x200,0x20,0x4c000,0x200,0x6c000,0x4c000,0x200,0x6c000,0x20,0x20,0x0,0x4000,0x6c000,0x200,0x4000,0x6c000,0x4000,0x20,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[44];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DMLQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DMLQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DMLQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DMLQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DMLQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DMLQLParser(DMLQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DMLQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 97; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[116];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 97; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 116; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 44; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
