/* Generated By:JavaCC: Do not edit this line. DMLQLParserTokenManager.java */
package dml.parser;
import java.io.*;
import java.util.*;
import java.util.regex.*;
import dml.parser.Expression.DataType;
import dml.parser.Expression.ValueType;
import dml.parser.Expression.FormatType;
import dml.parser.Expression.BinaryOp;
import dml.utils.LanguageException;
import java.util.ArrayList;

/** Token Manager. */
public class DMLQLParserTokenManager implements DMLQLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffbfffbf9fbff800L) != 0L || (active1 & 0x3fffffdL) != 0L)
         {
            jjmatchedKind = 118;
            return 1;
         }
         if ((active0 & 0x40004060400000L) != 0L || (active1 & 0x2L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0xffbffffbe7f7f000L) != 0L || (active1 & 0x3f9ffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x418080800L) != 0L || (active1 & 0x60000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xffaf7083e1f3f000L) != 0L || (active1 & 0x37fdfffL) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x108f7806040000L) != 0L || (active1 & 0x802000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xfe814003a0a3e000L) != 0L || (active1 & 0x37f9f9bL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x12e308041501000L) != 0L || (active1 & 0x4044L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xfe0100018003a000L) != 0L || (active1 & 0x35f9c51L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x80400220a04000L) != 0L || (active1 & 0x20038aL) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0xfe00000080038000L) != 0L || (active1 & 0x3579c81L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x1000100002000L) != 0L || (active1 & 0x80250L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x7e00000000000000L) != 0L || (active1 & 0x80L) != 0L)
            return 1;
         if ((active0 & 0x8000000080038000L) != 0L || (active1 & 0x3579c01L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active1 & 0x20L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 118;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x8000000000008000L) != 0L || (active1 & 0x110c01L) != 0L)
            return 1;
         if ((active0 & 0x80030000L) != 0L || (active1 & 0x3469000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 1;
         if ((active0 & 0x30000L) != 0L || (active1 & 0x3468000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x30000L) != 0L || (active1 & 0x3468000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x20000L) != 0L)
            return 1;
         if ((active0 & 0x10000L) != 0L || (active1 & 0x3468000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active1 & 0x8000L) != 0L)
            return 1;
         if ((active0 & 0x10000L) != 0L || (active1 & 0x3460000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active1 & 0x420000L) != 0L)
            return 1;
         if ((active0 & 0x10000L) != 0L || (active1 & 0x3040000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x10000L) != 0L || (active1 & 0x3040000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x10000L) != 0L || (active1 & 0x3040000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active0 & 0x10000L) != 0L || (active1 & 0x2000000L) != 0L)
            return 1;
         if ((active1 & 0x1040000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active1 & 0x40000L) != 0L)
            return 1;
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 16;
            return 1;
         }
         return -1;
      case 17:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      case 18:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 18;
            return 1;
         }
         return -1;
      case 19:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 19;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000L);
      case 35:
         return jjStopAtPos(0, 5);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 38:
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 40:
         return jjStopAtPos(0, 111);
      case 41:
         return jjStopAtPos(0, 112);
      case 42:
         return jjStopAtPos(0, 92);
      case 43:
         return jjStopAtPos(0, 90);
      case 44:
         return jjStopAtPos(0, 113);
      case 45:
         return jjStopAtPos(0, 91);
      case 47:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 58:
         return jjStopAtPos(0, 110);
      case 59:
         return jjStopAtPos(0, 109);
      case 60:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8100000000L);
      case 61:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 62:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0xc000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 91:
         return jjStopAtPos(0, 116);
      case 93:
         return jjStopAtPos(0, 117);
      case 94:
         return jjStopAtPos(0, 95);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20090000000L, 0x2000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x200200000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x5400001000000000L, 0x1c88401L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000011000L, 0x800L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x848000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xa0800L, 0x60010L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200c0000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x6000001100000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100700000000000L, 0x1300L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0xaa80000100002000L, 0x200044L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x18002000000000L, 0x100000L);
      case 116:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x4060400000L, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x88L);
      case 123:
         return jjStopAtPos(0, 114);
      case 124:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L);
      case 125:
         return jjStopAtPos(0, 115);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
      case 45:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         break;
      case 61:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 65:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 1);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80084004800000L, active1, 0xd000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x21000140102000L, active1, 0x400044L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4a000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000020000L, active1, 0x30L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x60800L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xfe00801000040000L, active1, 0xa00001L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0x100000L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x104000020600000L, active1, 0x200078aL);
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000201008000L, active1, 0x1010000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000010000L, active1, 0L);
      case 124:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 37:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         break;
      case 78:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 1);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20208020000000L, active1, 0x90046L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x100000L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 1);
         break;
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 1);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200004000L, active1, 0x388L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x5400000001800000L, active1, 0x21L);
      case 109:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 52, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 1);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x81000000008000L, active1, 0x404000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x106000000000000L, active1, 0x2000400L);
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x22000L, active1, 0x10L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000000000L, active1, 0x1000L);
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x40001000L, active1, 0x8800L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100010000L, active1, 0x60000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x200000L);
      case 118:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 1);
         break;
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0xaa00000000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0xf800000000000000L, active1, 0x1L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0x100000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x2L);
      case 100:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 1);
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000012000L, active1, 0x60800L);
      case 103:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x81000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200024000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 1);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x210300L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x400L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 1);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 1);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x409088L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0x3000000L);
      case 119:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 1);
         break;
      case 120:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000002000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 1);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 1);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 1);
         break;
      case 101:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 1);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 1);
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000080020000L, active1, 0x81L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000000L, active1, 0x1000L);
      case 107:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1080000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 1);
         break;
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000020L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100010000L, active1, 0x560010L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 116:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000008000L, active1, 0x10200L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x600000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 1);
         break;
      case 77:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x60000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x1400021L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 101:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000020000L, active1, 0x100000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000010000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 1);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 77:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 1);
         break;
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80010000L, active1, 0x100400L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x410800L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 1);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 1);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 1);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 1);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000020L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x60000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 1);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 1);
         break;
      case 104:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(7, 69);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L);
      case 108:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 1);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 1);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 31, 1);
         break;
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000000L);
      case 110:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 76, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000L, active1, 0x1000000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x60000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 17, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x60000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x60000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(11, 79, 1);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(12, 81, 1);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000L);
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 86, 1);
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000000L);
      case 98:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x1000000L);
      case 101:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(15, 89, 1);
         break;
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(15, 16, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0x1000000L);
      case 110:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(16, 82, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa18_0(active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa19_0(active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa20_0(active1, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 121:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(20, 88, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 36)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 5:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 6:
                  if (curChar == 34 && kind > 121)
                     kind = 121;
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 9:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if (curChar == 39)
                     jjCheckNAddStates(3, 5);
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 15:
                  if (curChar == 39 && kind > 122)
                     kind = 122;
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddStates(0, 2);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(17, 19);
                  break;
               case 5:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(20, 22);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(6, 8);
                  break;
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(4, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(23, 25);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 6;
                  jjCheckNAddStates(23, 25);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 2:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  kind = 6;
                  jjCheckNAddStates(23, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(23, 25);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   21, 22, 23, 12, 13, 15, 3, 4, 6, 3, 4, 8, 6, 12, 13, 17, 
   15, 5, 7, 9, 14, 16, 18, 0, 1, 3, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, "\151\146", 
"\145\154\163\145", "\162\145\160\145\141\164", "\167\150\151\154\145", 
"\146\165\156\143\164\151\157\156", "\145\170\164\145\162\156\141\154\106\165\156\143\164\151\157\156", 
"\151\155\160\154\145\155\145\156\164\145\144", "\146\157\162", "\151\156", "\156\145\170\164", "\142\162\145\141\153", 
"\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154", "\111\156\146", "\116\141\116", 
"\116\101", "\141\163", "\164\162\141\151\156", "\164\145\163\164", 
"\141\147\147\162\145\147\141\164\145", "\162\145\164\165\162\156", "\142\165\151\154\144", "\157\156", 
"\165\163\145", "\143\157\163", "\163\151\156", "\164\141\156", "\144\151\141\147", 
"\145\170\160", "\141\142\163", "\155\151\156", "\155\141\170", "\160\155\151\156", 
"\160\155\141\170", "\160\160\162\145\144", "\154\157\147", "\154\145\156\147\164\150", 
"\156\143\157\154", "\156\162\157\167", "\163\161\162\164", "\163\165\155", "\155\145\141\156", 
"\164", "\162\141\156\147\145", "\160\162\157\144", "\162\157\167\123\165\155\163", 
"\143\157\154\123\165\155\163", "\162\157\167\115\151\156\163", "\143\157\154\115\151\156\163", 
"\162\157\167\115\141\170\163", "\143\157\154\115\141\170\163", "\162\157\167\115\145\141\156\163", 
"\143\157\154\115\145\141\156\163", "\164\162\141\143\145", "\162\145\141\144", "\167\162\151\164\145", 
"\151\155\160\157\162\164", "\144\155\154\55\160\141\164\150", "\162\145\141\144\115\115", 
"\167\162\151\164\145\115\115", "\160\162\151\156\164", "\160\162\151\156\164\62", 
"\143\162\157\163\163\166\141\154", "\145\156\163\145\155\142\154\145", "\160\141\162\164\151\164\151\157\156", 
"\141\166\147", "\122\141\156\144", "\143\141\163\164\101\163\123\143\141\154\141\162", 
"\161\165\141\156\164\151\154\145", "\151\156\164\145\162\121\165\141\156\164\151\154\145", 
"\151\156\164\145\162\121\165\141\162\164\151\154\145\115\145\141\156", "\143\164\141\142\154\145", "\163\160\145\141\162\155\141\156", 
"\162\157\165\156\144", "\143\145\156\164\162\141\154\115\157\155\145\156\164", "\143\157\166", 
"\143\165\155\165\154\141\164\151\166\145\120\162\157\142\141\142\151\154\151\164\171", "\147\162\157\165\160\145\144\101\147\147\162\145\147\141\164\145", "\53", 
"\55", "\52", "\57", "\45\52\45", "\136", "\74\75", "\74", "\76\75", "\76", "\75\75", 
"\41\75", "\75", "\74\55", "\46\46", "\46", "\174\174", "\174", "\41", "\73", "\72", 
"\50", "\51", "\54", "\173", "\175", "\133", "\135", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, 2, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff801L, 0x7ffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x45eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x40L, 0x0L, 
};
static final long[] jjtoMore = {
   0x3a0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[25];
private final int[] jjstateSet = new int[50];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public DMLQLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public DMLQLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 25; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 6;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 7))
         {
            jjmatchedKind = 7;
            jjmatchedPos = 0;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
