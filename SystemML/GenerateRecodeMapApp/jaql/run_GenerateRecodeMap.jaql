///////////////////////////////////////////////////////////////////////////////
// 
// IBM Confidential
// 
// OCO Source Materials
// 
// (C) Copyright IBM Corp. 2009, 2010, 2011, 2012
// 
// The source code for this program is not published or
// 
// otherwise divested of its trade secrets, irrespective of
// 
// what has been deposited with the U.S. Copyright Office.
// 
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// FILE run_GenerateRecodeMap.jaql
//
// DESCRIPTION: The jaql file that is called from oozie workflow.xml
///////////////////////////////////////////////////////////////////////////////

//
// Main Driver
//
/*

# Example of invoking this script from the Linux command line, using JSON as input:

IN_DIR=input
OUT_DIR=output
jaqlshell -jp custom_modules -e "
Input_input_PARAM          = \"$IN_DIR/data.json\";
" jaql/run_MetadataEnhance.jaql

# Example of invoking this script from the Linux command line, using JSON as input and no metadata:

IN_DIR=input
OUT_DIR=output
jaqlshell -jp custom_modules -e "
Input_input_PARAM          = \"$IN_DIR/data.json\";
" jaql/run_MetadataEnhance.jaql

*/
//
//
// Main Flow:
//  
//    Initialize
//    If attributeKind is null, replace with heuristic
//    Generate recode map for categorical attributes
//

//
// --------------------------------------------------------------------------------
// Initialize
// --------------------------------------------------------------------------------
//

// DFS Path + filename for JSON text input data file
input = Input_input_PARAM;

toRecode = if (Input_toRecode_PARAM == "Yes")
(
   true
) else if (Input_toRecode_PARAM == "No")
(
   false
);

// DFS Path + filename for JSON text metadata input file
inputMetaData = strReplace(Input_input_PARAM, regex('.json'), '.meta.json');

// DFS Path + filename for the JSON text recode map generated by this script 
recodeMap = if (toRecode == true)
(
  strReplace(Input_input_PARAM, regex('.json'), '.map.json')
)else
(
  null
);

"---------- BEGIN run_MetadataEnhance.jaql ---------";
import GenerateRecodeMap;

setOptions( { conf: { "mapred.reduce.tasks.speculative.execution" : false } });
setOptions( { conf: { "mapred.child.java.opts" : "-Xmx2000M" } });

// pin metadata in memory
metadataMem := read(jsonText(inputMetaData));

jsonLines = fn(location)
    lines ( location,
        inoptions = { converter: "com.ibm.jaql.io.hadoop.converter.FromJsonTextConverter"},
        outoptions = { converter: "com.ibm.jaql.io.hadoop.converter.ToJsonTextConverter"});

inputData = read(jsonLines(input));

newMeta = GenerateRecodeMap::updateMetaData (inputData, metadataMem);

newMeta   
    -> write(jsonText(inputMetaData));

if (toRecode == true)
(
   GenerateRecodeMap::genRcdMap (inputData, newMeta, recodeMap)
);      
"---------- END run_RecodeGen.jaql -----------";
