#-------------------------------------------------------------
# IBM Confidential
# OCO Source Materials
# (C) Copyright IBM Corp. 2010, 2015
# The source code for this program is not published or
# otherwise divested of its trade secrets, irrespective of
# what has been deposited with the U.S. Copyright Office.
#-------------------------------------------------------------
#  
# THIS SCRIPT COMPUTES AN APPROXIMATE FACTORIZATIONOF A LOW-RANK MATRIX V INTO TWO MATRICES L AND R 
# USING ALTERNATING-LEAST-SQUARES (ALS) ALGORITHM 
# MATRICES L AND R ARE COMPUTED BY MINIMIZING A LOSS FUNCTION (WITH REGULARIZATION)
#
# INPUT   PARAMETERS:
# ---------------------------------------------------------------------------------------------
# NAME    TYPE     DEFAULT  MEANING
# ---------------------------------------------------------------------------------------------
# V       String   ---      Location to read the input matrix V to be factorized
# L       String   ---      Location to write the factor matrix L
# R       String   ---      Location to write the factor matrix R
# rank    Int      10       Rank of the factorization
# reg     String   "L2"	    Regularization: 
#						    "L2" = L2 regularization;
#                           "wL2" = weighted L2 regularization
# lambda  Double   0.0      Regularization parameter, no regularization if 0.0
# maxi    Int      50       Maximum number of iterations
# check   Boolean  FALSE    Check for convergence after every iteration, i.e., updating L and R once
# thr     Double   0.0001   Assuming check is set to TRUE, the algorithm stops and convergence is declared 
# 							if the decrease in loss in any two consecutive iterations falls below this threshold; 
#							if check is FALSE thr is ignored
# fmt     String   "text"   The output format of the factor matrices L and R, such as "text" or "csv"
# ---------------------------------------------------------------------------------------------
# OUTPUT: Matrix L and Matrix R
#
# HOW TO INVOKE THIS SCRIPT - EXAMPLE:
# hadoop jar SystemML.jar -f ALS.dml -nvargs V=INPUT_DIR/V L=OUTPUT_DIR/L R=OUTPUT_DIR/R
#     				                         rank=10 reg="wL2" lambda=0.0001 fmt=csv

fileV      = $V;
fileL	   = $L;
fileR      = $R;
# Default values of some parameters
r          = ifdef ($rank, 10);	        # $rank=10;
reg	   	   = ifdef ($reg, "L2")         # $reg="L2";
lambda	   = ifdef ($lambda, 0.000001); # $lambda=0.000001;
max_iter   = ifdef ($maxi, 50);         # $maxi=50;
check      = ifdef ($check, FALSE);	    # $check=FALSE;
thr        = ifdef ($thr, 0.0001);      # $thr=0.0001;
fmtO       = ifdef ($fmt, "text");      # $fmt="text";

V = read (fileV);

# check the input matrix V, if some rows or columns contain only zeros remove them from V  
n_non_empty_rows = rowSums (ppred (V, 0, "!="));
n_non_empty_cols = colSums (ppred (V, 0, "!="));
ind_empty_rows = ppred (n_non_empty_rows, 0, "==");
ind_empty_cols = ppred (n_non_empty_cols, 0, "==");
n_empty_rows = sum (ind_empty_rows);
n_empty_cols = sum (ind_empty_cols);
if (n_empty_rows > 0) {
	print ("Matrix V contains empty rows! These rows will be removed.");
	V = removeEmpty (target = V, margin = "rows");
}
if (n_empty_cols > 0) {
	print ("Matrix V contains empty columns! These columns will be removed.");
	V = removeEmpty (target = V, margin = "cols");
}

# initialize L and R randomly 
V_nonzero_ind = ppred (V, 0, "!=")
# global_sum = sum (V);
# nnz = sum (V_nonzero_ind);
# global_mean = global_sum / nnz;
# center V around its mean
# V = V - (global_mean * V_nonzero_ind);

###### MAIN PART ######
m = nrow (V);
n = ncol (V);

# initializing factor matrices
L = rand (rows = m, cols = r, min = -0.5, max = 0.5);
R = rand (rows = n, cols = r, min = -0.5, max = 0.5);

# initializing transformed matrices
Vt = t(V);

V_nonzero_ind_row = nrow (V_nonzero_ind);
V_nonzero_ind_col = ncol (V_nonzero_ind);
row_nonzeros = matrix(1, rows = V_nonzero_ind_row, cols = 1);
col_nonzeros = matrix(1, rows = V_nonzero_ind_col, cols = 1);
  
# check for regularization
if (reg == "L2") {
	print ("BEGIN ALS SCRIPT WITH NONZERO SQUARED LOSS + L2 WITH LAMBDA - " + lambda);
} else if (reg == "wL2") {
	print ("BEGIN ALS SCRIPT WITH NONZERO SQUARED LOSS + WEIGHTED L2 WITH LAMBDA - " + lambda);
	row_nonzeros = rowSums (V_nonzero_ind);
	col_nonzeros = t(colSums (V_nonzero_ind));
} else {
	stop ("wrong regularization! " + reg);
}

if (check) {
	loss_init = sum (V_nonzero_ind * (V - (L %*% t(R)))^2) + lambda * (sum ((L^2) * row_nonzeros) + sum ((R^2) * col_nonzeros));
	print ("-----   Initial train loss: " + loss_init + " -----");
}

lambda_I = diag (matrix (lambda, rows = r, cols = 1));
it = 0;
converged = FALSE;
while ((it < max_iter) & (!converged)) {
	it = it + 1;
	# keep R fixed and update L
	parfor (i in 1:m) {
    	R_nonzero_ind = t(ppred(V[i,],0,"!="));
		R_nonzero = removeEmpty (target=R * R_nonzero_ind, margin="rows");			
		A1 = (t(R_nonzero) %*% R_nonzero) + (as.scalar(row_nonzeros[i,1]) * lambda_I); # coefficient matrix
		L[i,] = t(solve (A1, t(V[i,] %*% R)));		
	}
  
	# keep L fixed and update R
	parfor (j in 1:n) {
		L_nonzero_ind = t(ppred(Vt[j,],0,"!="))
		L_nonzero = removeEmpty (target=L * L_nonzero_ind, margin="rows");
		A2 = (t(L_nonzero) %*% L_nonzero) + (as.scalar(col_nonzeros[j,1]) * lambda_I); # coefficient matrix
		R[j,] = t(solve (A2, t(Vt[j,] %*% L)));    
	}
	
	# check for convergence
	if (check) {
		loss_cur = sum (V_nonzero_ind * (V - (L %*% t(R)))^2) + lambda * (sum ((L^2) * row_nonzeros) + sum ((R^2) * col_nonzeros));
		loss_dec = (loss_init - loss_cur) / loss_init;
		print ("Train loss at iteration (R) " + it + ": " + loss_cur + " loss-dec " + loss_dec);
		if (loss_dec >= 0 & loss_dec < thr | loss_init == 0) {
			print ("----- ALS converged after " + it + " iterations!");
			converged = TRUE;
		}
		loss_init = loss_cur;
	}
} # end of while loop

if (check) {
	print ("-----	Final train loss: " + loss_init + " -----");
}

if (!converged) {
   print ("Max iteration achieved but not converged!");
} 

write (L, fileL, format=fmtO);
write (R, fileR, format=fmtO);
