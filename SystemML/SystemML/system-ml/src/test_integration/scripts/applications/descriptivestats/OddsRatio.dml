#-------------------------------------------------------------
# IBM Confidential
# OCO Source Materials
# (C) Copyright IBM Corp. 2010, 2014
# The source code for this program is not published or
# otherwise divested of its trade secrets, irrespective of
# what has been deposited with the U.S. Copyright Office.
#-------------------------------------------------------------


# DML script to compute oddsRatio and related confidence intervals
# Input: two column vectors with categorical values w/ number of categories = 2

#A1 = Rand(rows=1400, cols=1, min=1, max=2); 
#A2 = Rand(rows=1400, cols=1, min=1, max=2); 
#A1 = round(A1);
#A2 = round(A2);

A1 = read($1, rows=$2, cols=1);
A2 = read($3, rows=$2, cols=1);

F = table(A1, A2);

# Perform computations only on 2x2 contingency tables
if (nrow(F) != 2 | ncol(F) != 2) {
	print(max(A1) + ", " + max(A2));
	print("Only 2x2 tables are supported. Contingency table constructed from given data is [" + nrow(F) + ", " + ncol(F) + "]");
}
else {
	[oddsRatio, left_conf, right_conf, sd, chisquared, pvalue, crv, sigma_away, degf] = pair_corr(F);
	#print("Odds Ratio " + oddsRatio);
	#print("Standard Devication " + sd);
	#print("Confidence Interval [" + left_conf + "," + right_conf + "]");
	#print("Howmany sigma's away [" + sigma_away);
	#print("Chi-squared Test: statistic = " + chisquared + ", pValue = " + pvalue + ", Cramer's V = " + crv + ", Degrees of Freedom = " + degf);
	
	write(oddsRatio, $4);
	write(sd, $5);
	write(left_conf, $6);
	write(right_conf, $7);
	write(sigma_away, $8);
	#write(chisquared, $9);
	#write(degf, $10);
	#write(pvalue, $11);
	#write(crv, $12);
}

# -----------------------------------------------------------------------------------------------

# Given a 2x2 contingency table, it computes oddsRatio and the corresponding confidence interval
pair_corr = function(Matrix[Double] A) return (Double oddsRatio, Double left_conf, Double right_conf, Double sd, Double chisquared, Double pvalue, Double crv, Double sigma_away, Double df) {
	a11 = castAsScalar(A[1,1]);
	a12 = castAsScalar(A[1,2]);
	a21 = castAsScalar(A[2,1]);
	a22 = castAsScalar(A[2,2]);

	sd = sqrt(1/a11 + 1/a12 + 1/a21 + 1/a22);
	oddsRatio = (a11*a22)/(a12*a21);

	[chisquared, df, pvalue, crv] = bivar_cc(A);

	left_conf = exp( log(oddsRatio) - 2*sd )
	right_conf = exp( log(oddsRatio) + 2*sd )
	sigma_away = abs( log(oddsRatio)/sd )
}

# -----------------------------------------------------------------------------------------------

# Given a contingency table, perform the chi-squared test.
bivar_cc = function(Matrix[Double] F) return (Double chisq, Double df, Double pval, Double cramersv) {

    # Contingency Table
    # F = ctable(A,B);

    # Chi-Squared
    W = sum(F);
    r = rowSums(F);
    c = colSums(F);
    E = (r %*% c)/W;
    T = (F-E)^2/E;
    chi_squared = sum(T);

    # compute p-value
    degFreedom = (nrow(F)-1)*(ncol(F)-1);
    pValue = pchisq(target=chi_squared, df=degFreedom, lowertail=FALSE);

    # Cramer's V
    R = nrow(F);
    C = ncol(F);
    q = min(R,C);
    cramers_v = sqrt(chi_squared/(W*(q-1)));

    # Assign return values
    chisq = chi_squared;
    df = degFreedom;
    pval = pValue;
    cramersv = cramers_v;
}

# -----------------------------------------------------------------------------------------------


