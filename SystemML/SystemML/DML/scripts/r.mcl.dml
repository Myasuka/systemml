# Regularized-MCL Graph Clustering Algorithm

# A is the adjacency matrix of graph -- each column corresponds to outgoing edges of one node
A = read("r.mcl.ex.0.A", rows=10, cols=10, format="text");
D = colSums(A);
diag = DIAG ( D );
I = IDENTITY( NROW(A), NCOL(A) );

# AN = Normalized adjacency matrix
% sum of each column in AN is equal to 1
AN = (A+I) / diag;

M = AN;
continue = true;

while ( continue == true ) {
	% Step1 : Regularize
	M = M %*% AN;
	
	% Step2 : Inflate  -- M = EXP(M,2)
	M = M * M;
	
	%Step3 : Renormalize columns
	%We don't have this operation yet -- divide a matrix by a vector
	% M_ij = M_ij/sum(M_kj, for all k).. each element is divided by the sum of all elements in that columns
	M = M / colSum(M);
	
	%Step4 : Check for convergence
	%Each column should have only one non-zero (and, that non-zero would be equal to 1)
	% -- not sure how to check this criterion
	if ( check for convergence succeeds) {
	  continue = false;
	}
}

write(M, "r.mcl.result.M", format="text");
