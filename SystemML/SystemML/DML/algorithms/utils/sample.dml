#-------------------------------------------------------------
# IBM Confidential
# OCO Source Materials
# (C) Copyright IBM Corp. 2010, 2014
# The source code for this program is not published or
# otherwise divested of its trade secrets, irrespective of
# what has been deposited with the U.S. Copyright Office.
#-------------------------------------------------------------
#
# Sampling of a data set into number of samples specified as percentages in column vector
#
# Parameters:
#    X       : (input)  input data set: filename of input data set
#    sv      : (input)  sampling vector: filename of 1-column vector w/ percentages. sum(sv) must be 1.
#                         e.g. sv = (0.2)   for a 20% sample
#                         e.g. sv = (0.25, 0.25, 0.25, 0.25, 0.25) for 5 25% samples
#                         e.g. sv = (0.5, 0.3, 0.2) for a 50%, 30%, and 20% sample
#    O       : (output) folder name w/ samples generated
#    ofmt    : (output, default "binary") format of O: "csv", "binary" 
#
# Example:
#   hadoop jar SystemML.jar -f algorithms/utils/sample.dml -nvargs X="/tmp/X.mtx" sv="/tmp/sv.mtx" O=/tmp/Out

# set defaults
ofmt = ifdef($ofmt, "binary")

                                        # Read inputs
X = read ($X);         # X dataset
sv = read ($sv);       # sv sample.dml vector

# Construct sampling lower/upper bounds for samples using prefix sum
R = rand(rows=nrow(X), cols=1, min=0.0, max=1.0, pdf = "uniform");
svLowBnd = cumsum(sv) - sv;
svUpBnd = cumsum(sv);
write(svLowBnd, "/tmp/svLowBnd", format="csv")
write(svUpBnd, "/tmp/svUpBnd", format="csv")


# Construct sampling matrix SM, and apply to create samples
parfor ( i in 1:nrow(sv))
{
  T1 = ppred(R, as.scalar(svUpBnd[i,1]), "<=");
  T2 = ppred(R, as.scalar(svLowBnd[i,1]), ">");
  SM = T1 * T2; 
  if (sum(SM) == 0)
    {
      # empty sample
      iX = matrix(0, rows=1, cols=ncol(X))
    }
  else
    {
      P = removeEmpty(target=diag(SM), margin="rows")
      iX = P %*% X
    }
  write (iX, $O + "/" + i, format=ofmt)
}
