#-------------------------------------------------------------
# IBM Confidential
# OCO Source Materials
# (C) Copyright IBM Corp. 2010, 2014
# The source code for this program is not published or
# otherwise divested of its trade secrets, irrespective of
# what has been deposited with the U.S. Copyright Office.
#-------------------------------------------------------------

# This script can be used to compute label predictions
# Meant for use with a decision tree model on a held out test set
#
# Given ground truth labels, the script will compute an 
# accuracy (%) for the predictions (if requested)
#
# Example Usage:
# hadoop jar SystemML.jar -f decision-tree-predict.dml -nvargs X=data Y=labels model=model predictions=predictions accuracy=accuracy confusion=confusion fmt="text"

cmdLine_Y = ifdef($Y, " ")
cmdLine_confusion = ifdef($confusion, " ")
cmdLine_accuracy = ifdef($accuracy, " ")
cmdLine_predictions = ifdef($predictions, " ")
cmdLine_fmt = ifdef($fmt, "text")

X = read($X)
model = read($model)

pred = matrix(0, rows=nrow(X), cols=1)

parfor(i in 1:nrow(X)){
	row = X[i,]
    curr_node = 1
      
    while(as.scalar(model[1,curr_node]) > 0){
		curr_node_feature = as.scalar(model[1,curr_node])
		curr_node_kind = as.scalar(model[2,curr_node])
	    row_value_for_curr_node_feature = as.scalar(row[1,curr_node_feature])
	    
	    if(curr_node_kind == 1)
	    	r_branch = 1.0 - as.integer(row_value_for_curr_node_feature < as.scalar(model[3, curr_node]))
	    else
	    	r_branch = 
	    		1.0 
	    		- sum(ppred(model[3:nrow(model), curr_node], row_value_for_curr_node_feature, "==")) 
	    		+ as.integer(as.scalar(model[3, curr_node]) == row_value_for_curr_node_feature)
	    
	    curr_node = 2*curr_node + r_branch
	}
		
	pred[i,1] = model[2,curr_node]
}

if(cmdLine_predictions != " ")
      write(pred, cmdLine_predictions, format=cmdLine_fmt)

if(cmdLine_Y != " "){
      y = read(cmdLine_Y)

      num_correct = sum(ppred(pred, y, "=="))
      acc = 100*num_correct/nrow(X)

      acc_str = "Accuracy (%): " + acc
      print(acc_str)
      if(cmdLine_accuracy != " ")
            write(acc_str, cmdLine_accuracy)
				 
      num_classes = max(y)
				 
      if(cmdLine_confusion != " "){
            confusion_mat = table(pred, y, num_classes, num_classes)
            write(confusion_mat, cmdLine_confusion, format="csv")
      }
}
