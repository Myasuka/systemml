#
#
# Comments: on DML5, in bjr/bmw/data
#           $ screen
#           $ R
#           Ctrl-a Ctrl-d
#           $ logout
#           $ screen -x
#

library( Matrix);
library( e1071);
library( SparseM);

#
# read in readout info
#

# dim( roInfo): [1] 13,881,573       10
roInfo<-read.table( "ReadOutInfos2.del" , sep=",", header=F, quote="\""
                   ,row.names = 1
                   ,col.names = c("key", "vin", "repair_case", "readout_index", "readout_date", "mileage",
                                  "model", "production_date", "class", "ldate", "DTCcnt"), 
                   ,colClasses = c("factor", "factor", "factor", "factor", "character", "integer",
                                 "factor", "character", "factor", "character", "integer"));
roInfo$readout_date = as.Date(roInfo$readout_date, "%Y%m%d")
roInfo$production_date = as.Date(roInfo$production_date, "%Y%m%d")
roInfo$ldate = as.Date(roInfo$ldate, "%Y%m%d")

# roAfter: remove the readouts after a car became a lemon
# length (roAfter): [1] 45626
roAfter = rownames(subset( roInfo, readout_date > ldate))
# dim (roInfo): [1] 13,835,947       10
roInfo = subset( roInfo, is.na( ldate) | readout_date <= ldate)

# there are readouts w/ DTCcnt=0: dim(subset( roInfo, DTCcnt==0)): [1] 4,865,654      10
# We have 2,612,475 cars: length( unique( roInfo$vin)); [1] 2612475
# 8,744 of these cars are lemons: length( unique( subset( roInfo, class=="lemon")$vin))


#
# Readout dtcs
#

# dim( dtcs): [1] 247,076,505         3
dtcs<-read.table( "ReadOutDTCs.del", sep=",", header=F, quote="\""
                 ,col.names = c("key", "dtc", "value")
                 ,colClasses=c("factor","factor","numeric"))

# remove DTCS of readouts after lemon date
# dim( dtcs): [1] 246,084,685         3
dtcs = subset( dtcs, !(key %in% roAfter)) 
rm (roAfter)

# add 1 entry for each readout w/ no DTCs: dim(subset( roInfo, DTCcnt==0)): [1] 4,865,654      10
tmp1 = rownames(subset( roInfo, DTCcnt==0))
tmp = data.frame( tmp1
                 ,rep( dtcs[1,2], length( tmp1))
                 ,rep( 0, length( tmp1))
                 )
colnames( tmp) = c("key", "dtc", "value")
# dim( dtcs) [1] 250,950,339         3
# length( unique( dtcs$key)): [1] 13,835,947 
dtcs = rbind( dtcs, tmp)
rm( tmp1, tmp)


write.table( dtcs, "var_dtcs.del")


# create sparse matrx w/ DTCs

# summary (mdtcs): 
# length( unique(as.integer( dtcs[,1]))): [1] 13835947
# dim (mdtcs): [1] 13,863,493    74804
# max( unique(as.integer( dtcs[,1]))): [1] 13863493

mdtcs<-sparseMatrix( i=r( dtcs[,1])
                    ,j=as.integer( dtcs[,2])
                    ,x=dtcs[,3]
                    ,dimnames = list( levels( dtcs[,1]), levels( dtcs[,2]))
                    )

mdtcs<-sparseMatrix( i=as.integer( dtcs[,1])
                    ,j=as.integer( dtcs[,2])
                    ,x=dtcs[,3]
                    ,dimnames = list( levels( dtcs[,1]), levels( dtcs[,2]))
                    )

mresp= sparseMatrix( i=as.integer( as.factor(rownames(roInfo)))
                    ,j=rep( 1, length( rownames(roInfo)))
                    ,x=as.integer( roInfo$class)
                   )

#########
# SVM
#########

mysvm = svm( mdtcs, roInfo$class, type="C-classification", kernel="linear", cost=1)
