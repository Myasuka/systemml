#-------------------------------------------------------------
# IBM Confidential
# OCO Source Materials
# (C) Copyright IBM Corp. 2010, 2014
# The source code for this program is not published or
# otherwise divested of its trade secrets, irrespective of
# what has been deposited with the U.S. Copyright Office.
#-------------------------------------------------------------

# Note this script is externalized to customers, please do not change w/o consulting component owner.
# How to invoke this dml script OrdinalOrdinal.dml?
# Assume OO_HOME is set to the home of the dml script
# Assume input and output directories are on hdfs as INPUT_DIR and OUTPUT_DIR
# Assume rows = 10000 for A and B
# hadoop jar SystemML.jar -f $OO_HOME/OrdinalOrdinal.dml -args "$INPUT_DIR/A" 10000 "$INPUT_DIR/B" "$OUPUT_DIR/Spearman"

#-------------------------------------------------------------------------
# Function to compute ranks
# takes a column vector as input, and produces a vector of same size in which each cell denotes to the computed score for that category
computeRanks = function(Matrix[Double] X) return (Matrix[Double] Ranks) {
    dummy = Rand(rows=1, cols=1, min=1, max=1);
    Rks = X;
    size = nrow(X);
    for(i in 1:size) {
        prefixSum = 0.0;
        if( i>1 ){
           prefixSum = sum(X[1:(i-1),1]);
        }
        Rks[i,1] = dummy * (prefixSum + ((castAsScalar(X[i,1])+1)/2));
    }
    Ranks = Rks;
}
#-------------------------------------------------------------------------

A = read($1, rows=$2, cols=1, format="text");
B = read($3, rows=$2, cols=1, format="text");

# compute contingency table
F = table(A,B);

catA = nrow(F);  # number of categories in A
catB = ncol(F);  # number of categories in B

# compute category-wise counts for both the attributes
R = rowSums(F);
S = colSums(F);

# compute scores, both are column vectors
[C] = computeRanks(R);
meanX = mean(C,R); 

columnS = t(S);
[D] = computeRanks(columnS);

# scores (C,D) are individual values, and counts (R,S) act as weights
meanY = mean(D,columnS);

W = sum(F); # total weight, or total #cases
varX = moment(C,R,2)*(W/(W-1.0));
varY = moment(D,columnS,2)*(W/(W-1.0));

covXY = 0.0;
for(i in 1:catA) {
    covXY = covXY + sum((F[i,]/(W-1)) * (castAsScalar(C[i,1])-meanX) * (t(D[,1])-meanY));
}

sp = covXY/(sqrt(varX)*sqrt(varY));

#print("X: mean " + meanX + ", var " + varX);
#print("Y: mean " + meanY + ", var " + varY);
#print("covXY: " + sp);

#sp = spearman(A,B);

write(sp, $4);

